/*
 * File:   CatchAtAge.hpp
 *
 * based on the GOA walleye pollock model from 2015
 *
 */

#ifndef CATCHATAGE_HPP
#    define CATCHATAGE_HPP

#include "../ATL2/ATL.hpp"

#include "../ATL2/Optimization.hpp"
#include "../ATL2/MatrixUtilities.hpp"
#include "../ATL2/Utilities/IO/StreamedDataFile.hpp"

#include <sstream>

#define SQUARE(x) ((x)*(x))


// template<typename T>
// std::ostream& operator<<(std::ostream& out, const atl::VariableVector<T>& v)
// {
//     if (v.size() > 0)
//     {
//         for (int i = 0; i < v.size(); i++)
//         {
//             out << v[i] << " ";
//         }

//         out << std::endl;
//     }

//     return out;
// }

template<typename T>
std::ostream& operator<<(std::ostream& out, const std::vector<T>& v)
{
    if (v.size() > 0)
    {
        for (int i = 0; i < v.size(); i++)
        {
            out << v[i] << " ";
        }

        out << std::endl;
    }

    return out;
}

template<typename T>
atl::VariableMatrix<T> RealMatrixMult(atl::RealMatrix<T>& a, atl::RealMatrix<T>& b)
{
    atl::VariableMatrix<T> m;

    size_t a_i = a.GetRows();
    size_t a_j = a.GetColumns();
    size_t b_i = b.GetRows();
    size_t b_j = b.GetColumns();

    if ( a_i > 0 && a_j > 0 && b_i > 0 && b_j > 0 && a_j == b_i )
    {
        m.Resize(a_i, b_j);

        for ( int i = 0; i < a_i; ++i )
        {
            for ( int j = 0; j < b_j; ++j )
            {
                m(i, j) = atl::Sum(atl::VariableMatrix<T>(a.Row(i) * b.Column(j)));
            }
        }
    }

    return m;
}

template<typename T>
atl::VariableVector<T> VariableRowVectorDiv(atl::VariableMatrix<T>& num, int& num_row_idx, atl::VariableMatrix<T>& den, int& den_row_idx)
{
    atl::VariableVector<T> v;

    size_t num_i = num.GetRows();
    size_t num_j = num.GetColumns();
    size_t den_i = den.GetRows();
    size_t den_j = den.GetColumns();

    if ( num_i > 0 && num_j > 0 && den_i > 0 && den_j > 0 && num_j == den_j)
    {
        if ( num_row_idx >= 0 && num_row_idx < num_i && den_row_idx >= 0 && den_row_idx < den_i )
        {
            auto num_v = num.Row(num_row_idx);
            auto den_v = den.Row(den_row_idx);

            v.Resize(num_j);

            for ( int i = 0; i < num_j; ++i )
            {
                v(i) = num_v(i) / den_v(i);
            }
        }
    }

    return v;
}

template<typename T>
class CatchAtAge : public atl::ObjectiveFunction<T>
{
    int nages = 10;
    std::vector<T> ages = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    atl::Variable<T> sigmaR = 1.0;

    // 1970 through 2015
    int nyrs = 46;
    std::vector<T> obs_catch = { 9379, 9460, 38131, 44993, 61905, 59504, 86731, 118092, 95408, 106161, 115158, 147818, 169045, 215625, 307541, 286900, 86910, 68070, 63391, 75585, 88269, 100488, 90858, 108909, 107335, 72618, 51263, 90130, 125460, 95638, 73080, 72077, 51933.52, 50684, 63844, 80978, 71976, 52714, 52584, 44247, 76745, 81357, 103982, 96363, 142633, 175025 };
    std::vector<T> obs_catch_CV = { 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05 };

    int nyrs_fsh_prop_at_age = 40;
    int age_young_fsh = 2 - 1;
    int age_old_fsh = 10 - 1;
    std::vector<int> yrs_fsh_prop_at_age = { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 };
    std::vector<T> obs_fsh_prop_at_age_N = { 0.576968965, 12.6933387, 110.7781701, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 50.19626774, 16.15510954, 19.04000805, 42.69574635, 63.46647878, 95.19982553, 80.19867539, 83.66044623, 89.43024325, 57.11991679, 36.92594934, 79.62169569, 80.77565509, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793, 115.393793 };
    atl::RealMatrix<T> obs_fsh_prop_at_age = {
        // 1    2    3    4    5    6    7   8   9   10
        // 1975
        { 0, 0.0236, 0.54351, 0.16903, 0.14228, 0.06681, 0.02773, 0.02704, 0, 0 },
        // 1976
        { 0, 0.00887, 0.10754, 0.57746, 0.1873, 0.07796, 0.01723, 0.01335, 0.00918, 0.00111 },
        // 1977
        { 0.00023, 0.0357, 0.06007, 0.13767, 0.52208, 0.15082, 0.05655, 0.01469, 0.01298, 0.00921 },
        // 1978
        { 0.00186, 0.06586, 0.20998, 0.14777, 0.14708, 0.28513, 0.08232, 0.03497, 0.01302, 0.01201 },
        // 1979
        { 0.00049, 0.01794, 0.28249, 0.46221, 0.07363, 0.04897, 0.06695, 0.03085, 0.01201, 0.00445 },
        // 1980
        { 0.00271, 0.05448, 0.15424, 0.32356, 0.23351, 0.07711, 0.0596, 0.05423, 0.02743, 0.01313 },
        // 1981
        { 0.00106, 0.02257, 0.16577, 0.34347, 0.27585, 0.10965, 0.03158, 0.02737, 0.0195, 0.00319 },
        // 1982
        { 0.00015, 0.03476, 0.15223, 0.33796, 0.265, 0.15671, 0.03997, 0.00625, 0.00401, 0.00295 },
        // 1983
        { 0, 0.01954, 0.1187, 0.22877, 0.34192, 0.16679, 0.09302, 0.02448, 0.00478, 0.002 },
        // 1984
        { 0.00176, 0.01308, 0.15467, 0.16555, 0.20286, 0.30221, 0.10886, 0.03699, 0.01227, 0.00176 },
        // 1985
        { 0.00061, 0.03478, 0.02227, 0.10871, 0.11786, 0.21175, 0.35247, 0.11011, 0.03092, 0.0105 },
        // 1986
        { 0.01198, 0.07269, 0.17624, 0.10569, 0.23362, 0.09937, 0.10827, 0.13094, 0.0523, 0.0089 },
        // 1987
        { 0, 0.05928, 0.08966, 0.07992, 0.09287, 0.17489, 0.14979, 0.09852, 0.21814, 0.03692 },
        // 1988
        { 0.01019, 0.10561, 0.15147, 0.22892, 0.19201, 0.12672, 0.07065, 0.03237, 0.00479, 0.07727 },
        // 1989
        { 0.02746, 0.01243, 0.03383, 0.3221, 0.36739, 0.12687, 0.04869, 0.02475, 0.01008, 0.02641 },
        // 1990
        { 0, 0.01384, 0.0174, 0.02561, 0.14905, 0.46979, 0.16778, 0.09507, 0.02296, 0.0385 },
        // 1991
        { 0, 0.01233, 0.08783, 0.04705, 0.04148, 0.08003, 0.36789, 0.04062, 0.20725, 0.11553 },
        // 1992
        { 0.00104, 0.01513, 0.03218, 0.20506, 0.21846, 0.11496, 0.08327, 0.17259, 0.05289, 0.10442 },
        // 1993
        { 0.00032, 0.01958, 0.06724, 0.15852, 0.38023, 0.13266, 0.05731, 0.05449, 0.07736, 0.0523 },
        // 1994
        { 0.00059, 0.00826, 0.03895, 0.07112, 0.3125, 0.27917, 0.11223, 0.04937, 0.04416, 0.08365 },
        // 1995
        { 0, 0.00365, 0.02713, 0.0757, 0.14863, 0.34519, 0.21383, 0.06756, 0.03229, 0.08602 },
        // 1996
        { 0, 0.01752, 0.04251, 0.0314, 0.0893, 0.12319, 0.23836, 0.25471, 0.08346, 0.11955 },
        // 1997
        { 0, 0.0208, 0.09052, 0.05128, 0.05387, 0.10351, 0.15528, 0.23616, 0.17253, 0.11605 },
        // 1998
        { 0.00421, 0.00146, 0.1467, 0.25061, 0.11009, 0.06496, 0.07381, 0.08601, 0.12501, 0.13714 },
        // 1999
        { 0, 0.00724, 0.02525, 0.22161, 0.33334, 0.09753, 0.07285, 0.03871, 0.05998, 0.14349 },
        // 2000
        { 0.00117, 0.01467, 0.04266, 0.05222, 0.22042, 0.37043, 0.09385, 0.07602, 0.03465, 0.09391 },
        // 2001
        { 0.0102, 0.14039, 0.09131, 0.10172, 0.13052, 0.17447, 0.20011, 0.06552, 0.03745, 0.0483 },
        // 2002
        { 0.00239, 0.1806, 0.30401, 0.09921, 0.06563, 0.12833, 0.07883, 0.08887, 0.01946, 0.03268 },
        // 2003
        { 0.00211, 0.03968, 0.31673, 0.33854, 0.07856, 0.04801, 0.0687, 0.05545, 0.03811, 0.01411 },
        // 2004
        { 0.00966, 0.07115, 0.13501, 0.36079, 0.28428, 0.06773, 0.02755, 0.02983, 0.00869, 0.00532 },
        // 2005
        { 0.01323, 0.01409, 0.06199, 0.07972, 0.48013, 0.2529, 0.07103, 0.00866, 0.01055, 0.00771 },
        // 2006
        { 0.03279, 0.11588, 0.06191, 0.04089, 0.08878, 0.40737, 0.19036, 0.03641, 0.01233, 0.01328 },
        // 2007
        { 0.01502, 0.34553, 0.13641, 0.04594, 0.04231, 0.06555, 0.18643, 0.12248, 0.02909, 0.01122 },
        // 2008
        { 0.00624, 0.12369, 0.43107, 0.13284, 0.04231, 0.02274, 0.04465, 0.10994, 0.05583, 0.03068 },
        // 2009
        { 0.00529, 0.14023, 0.32617, 0.29596, 0.08387, 0.02607, 0.01585, 0.02092, 0.04177, 0.04386 },
        // 2010
        { 0.0001, 0.06931, 0.30603, 0.27942, 0.23765, 0.04817, 0.01456, 0.00954, 0.01203, 0.0232 },
        // 2011
        { 0, 0.03098, 0.15145, 0.33313, 0.25965, 0.16319, 0.03698, 0.00759, 0.00478, 0.01225 },
        // 2012
        { 0.00039, 0.00806, 0.05647, 0.16424, 0.36307, 0.26084, 0.10878, 0.02368, 0.00529, 0.00919 },
        // 2013
        { 0.00839, 0.03897, 0.14735, 0.07666, 0.1878, 0.24818, 0.18154, 0.07413, 0.01455, 0.02244 },
        // 2014
        { 0.00061, 0.08371, 0.05361, 0.25053, 0.0969, 0.11961, 0.17478, 0.1402, 0.05521, 0.02484 }
    };

    int nyrs_fsh_prop_at_len = 9;
    std::vector<int> yrs_fsh_prop_at_len = { 0, 1, 2, 3, 4, 5, 6, 7, 8 };
    std::vector<T> obs_fsh_prop_at_len_N = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    atl::RealMatrix<T> obs_fsh_prop_at_len = {
        // 1    2    3    4    5    6    7   8
        // 1970
        { 0, 0.0004, 0.05658, 0.25321, 0.53612, 0.11717, 0.02408, 0.01244 },
        // 1971
        { 0, 0.0106, 0.05913, 0.41967, 0.41677, 0.08965, 0.00386, 0.00032 },
        // 1972
        { 0, 0.00018, 0.01728, 0.16863, 0.47023, 0.25935, 0.07353, 0.01079 },
        // 1973
        { 0, 0, 0.00321, 0.14437, 0.34729, 0.24572, 0.16406, 0.09535 },
        // 1974
        { 0, 0, 0.00151, 0.13218, 0.5642, 0.15332, 0.09517, 0.05363 },
        // 1975
        { 0, 0, 0, 0.13529, 0.62206, 0.19706, 0.04412, 0.00147 },
        // 1976
        { 0, 0.00043, 0.02744, 0.45026, 0.4241, 0.08105, 0.01372, 0.003 },
        // 1977
        { 0, 0.00417, 0.17917, 0.45833, 0.3175, 0.03833, 0.0025, 0 },
        // 1978
        { 0, 0, 0.00084, 0.14298, 0.6087, 0.22826, 0.01923, 0 }
    };

    atl::RealMatrix<T> obs_fsh_wt_at_age = {
        // 1970
        { 0.096, 0.211, 0.375, 0.511, 0.633, 0.727, 0.829, 0.929, 0.952, 0.996 },
        // 1971
        { 0.096, 0.211, 0.375, 0.511, 0.633, 0.727, 0.829, 0.929, 0.952, 0.996 },
        // 1972
        { 0.096, 0.211, 0.375, 0.511, 0.633, 0.727, 0.829, 0.929, 0.952, 0.996 },
        // 1973
        { 0.096, 0.211, 0.375, 0.511, 0.633, 0.727, 0.829, 0.929, 0.952, 0.996 },
        // 1974
        { 0.096, 0.211, 0.375, 0.511, 0.633, 0.727, 0.829, 0.929, 0.952, 0.996 },
        // 1975
        { 0.103, 0.225, 0.412, 0.547, 0.738, 0.927, 1.02, 1.142, 1.142, 1.142 },
        // 1976
        { 0.103, 0.237, 0.325, 0.426, 0.493, 0.567, 0.825, 0.864, 0.81, 0.843 },
        // 1977
        { 0.072, 0.176, 0.442, 0.525, 0.616, 0.658, 0.732, 0.908, 0.894, 0.955 },
        // 1978
        { 0.1, 0.14, 0.322, 0.574, 0.616, 0.685, 0.742, 0.842, 0.896, 0.929 },
        // 1979
        { 0.099, 0.277, 0.376, 0.485, 0.701, 0.796, 0.827, 0.89, 1.017, 1.111 },
        // 1980
        { 0.091, 0.188, 0.487, 0.559, 0.635, 0.774, 0.885, 0.932, 0.957, 1.032 },
        // 1981
        { 0.163, 0.275, 0.502, 0.686, 0.687, 0.769, 0.876, 0.967, 0.969, 1.211 },
        // 1982
        { 0.072, 0.297, 0.416, 0.582, 0.691, 0.665, 0.73, 0.951, 0.991, 1.051 },
        // 1983
        { 0.103, 0.242, 0.452, 0.507, 0.635, 0.686, 0.689, 0.787, 0.919, 1.078 },
        // 1984
        { 0.134, 0.334, 0.539, 0.724, 0.746, 0.815, 0.854, 0.895, 0.993, 1.129 },
        // 1985
        { 0.121, 0.152, 0.481, 0.628, 0.711, 0.813, 0.874, 0.937, 0.985, 1.156 },
        // 1986
        { 0.078, 0.153, 0.464, 0.717, 0.791, 0.892, 0.902, 0.951, 1.01, 1.073 },
        // 1987
        { 0.123, 0.272, 0.549, 0.684, 0.896, 1.003, 1.071, 1.097, 1.133, 1.102 },
        // 1988
        { 0.16, 0.152, 0.433, 0.532, 0.806, 0.997, 1.165, 1.331, 1.395, 1.41 },
        // 1989
        { 0.068, 0.201, 0.329, 0.55, 0.667, 0.883, 1.105, 1.221, 1.366, 1.459 },
        // 1990
        { 0.123, 0.137, 0.248, 0.536, 0.867, 0.98, 1.135, 1.377, 1.627, 1.763 },
        // 1991
        { 0.123, 0.262, 0.423, 0.582, 0.721, 0.943, 1.104, 1.189, 1.296, 1.542 },
        // 1992
        { 0.121, 0.238, 0.375, 0.566, 0.621, 0.807, 1.06, 1.179, 1.188, 1.417 },
        // 1993
        { 0.136, 0.282, 0.55, 0.688, 0.782, 0.842, 1.048, 1.202, 1.25, 1.356 },
        // 1994
        { 0.141, 0.193, 0.471, 0.743, 0.872, 1, 1.08, 1.23, 1.325, 1.433 },
        // 1995
        { 0.123, 0.302, 0.623, 0.966, 1.05, 1.107, 1.198, 1.292, 1.346, 1.44 },
        // 1996
        { 0.123, 0.249, 0.355, 0.67, 1.01, 1.102, 1.179, 1.238, 1.284, 1.41 },
        // 1997
        { 0.123, 0.236, 0.38, 0.659, 0.948, 1.161, 1.233, 1.274, 1.297, 1.358 },
        // 1998
        { 0.097, 0.248, 0.472, 0.571, 0.817, 0.983, 1.219, 1.325, 1.36, 1.409 },
        // 1999
        { 0.123, 0.323, 0.533, 0.704, 0.757, 0.914, 1.049, 1.196, 1.313, 1.378 },
        // 2000
        { 0.125, 0.312, 0.434, 0.773, 0.991, 0.998, 1.202, 1.271, 1.456, 1.663 },
        // 2001
        { 0.125, 0.292, 0.442, 0.701, 1.003, 1.208, 1.286, 1.473, 1.54, 1.724 },
        // 2002
        { 0.125, 0.316, 0.48, 0.615, 0.898, 1.05, 1.146, 1.263, 1.363, 1.522 },
        // 2003
        { 0.125, 0.369, 0.546, 0.507, 0.715, 1.049, 1.242, 1.43, 1.511, 1.7 },
        // 2004
        { 0.125, 0.259, 0.507, 0.72, 0.677, 0.896, 1.123, 1.262, 1.338, 1.747 },
        // 2005
        { 0.125, 0.275, 0.446, 0.79, 1.005, 0.977, 0.921, 1.305, 1.385, 1.485 },
        // 2006
        { 0.125, 0.26, 0.566, 0.974, 1.229, 1.242, 1.243, 1.358, 1.424, 1.653 },
        // 2007
        { 0.125, 0.345, 0.469, 0.885, 1.195, 1.385, 1.547, 1.634, 1.749, 1.94 },
        // 2008
        { 0.125, 0.309, 0.649, 0.856, 1.495, 1.637, 1.894, 1.896, 1.855, 2.204 },
        // 2009
        { 0.125, 0.235, 0.566, 0.96, 1.249, 1.835, 2.002, 2.151, 2.187, 2.208 },
        // 2010
        { 0.125, 0.327, 0.573, 0.972, 1.267, 1.483, 1.674, 2.036, 2.329, 2.191 },
        // 2011
        { 0.125, 0.473, 0.593, 0.833, 1.107, 1.275, 1.409, 1.632, 1.999, 1.913 },
        // 2012
        { 0.125, 0.294, 0.793, 0.982, 1.145, 1.425, 1.6, 1.869, 2.051, 2.237 },
        // 2013
        { 0.125, 0.561, 0.685, 1.141, 1.323, 1.467, 1.641, 1.801, 1.913, 2.167 },
        // 2014
        { 0.104, 0.245, 0.749, 0.865, 1.092, 1.362, 1.482, 1.632, 1.72, 1.826 },
        // 2015
        { 0.104, 0.245, 0.749, 0.865, 1.092, 1.362, 1.482, 1.632, 1.72, 1.826 }
    };


    // EIT survey (indices are for age 3+ biomass)
    int nyrs_srv1a = 9;
    std::vector<int> yrs_srv1a = { 11, 13, 14, 15, 16, 18, 19, 20, 21 };
    std::vector<T> obs_srv_1a_biomass = { 2476000, 2207000, 1750000, 1097000, 442000, 294000, 278000, 308000, 368000 };
    std::vector<T> obs_srv_1a_CV = { 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2 };

    int nyrs_srv1b = 15;
    std::vector<int> yrs_srv1b = { 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37 };
    std::vector<T> obs_srv_1b_biomass = { 708000, 428882, 487456, 603188, 596187, 567746, 492512, 327874, 215958, 243278, 308498, 322281, 324851.639, 237235.945, 165682.213 };
    std::vector<T> obs_srv_1b_CV = { 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2 };

    int nyrs_srv1 = 7;
    std::vector<int> yrs_srv1 = { 38, 39, 40, 42, 43, 44, 45 };
    std::vector<T> obs_srv_1_biomass = { 150320, 168300, 404740, 266920, 813690, 624290, 835430 };
    std::vector<T> obs_srv_1_CV = { 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2 };

    int nyrs_srv1_prop_at_age = 22;
    int age_young_srv1 = 3 - 1;
    int age_old_srv1 = 10 - 1;
    std::vector<int> yrs_srv1_prop_at_age = { 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45 };
    std::vector<T> obs_srv_1_prop_at_age_N = { 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788, 10.36673788 };
    atl::RealMatrix<T> obs_srv_1_prop_at_age = {
        // 1992
        { 0, 0, 0.06827, 0.17463, 0.34164, 0.07809, 0.0789, 0.15893, 0.03036, 0.06918 },
        // 1993
        { 0, 0, 0.06173, 0.12061, 0.38783, 0.21023, 0.0446, 0.05936, 0.06451, 0.05112 },
        // 1994
        { 0, 0, 0.0971, 0.06252, 0.30533, 0.16461, 0.08367, 0.05362, 0.08754, 0.1456 },
        // 1995
        { 0, 0, 0.10854, 0.10626, 0.14131, 0.33537, 0.16647, 0.07326, 0.02275, 0.04603 },
        // 1996
        { 0, 0, 0.17993, 0.03801, 0.08167, 0.10745, 0.30415, 0.17931, 0.06021, 0.04926 },
        // 1997
        { 0, 0, 0.7732, 0.04966, 0.01143, 0.02732, 0.03209, 0.06051, 0.03271, 0.0131 },
        // 1998
        { 0, 0, 0.13344, 0.50408, 0.14465, 0.01511, 0.03393, 0.03857, 0.07872, 0.05151 },
        // 2000
        { 0, 0, 0.4313, 0.03153, 0.13385, 0.26223, 0.0335, 0.02512, 0.01966, 0.06282 },
        // 2001
        { 0, 0, 0.65331, 0.11334, 0.07718, 0.04271, 0.06431, 0.02427, 0.01151, 0.01338 },
        // 2002
        { 0, 0, 0.8831, 0.07703, 0.01296, 0.01287, 0.00614, 0.00542, 0.00117, 0.0013 },
        // 2003
        { 0, 0, 0.1918, 0.74108, 0.05225, 0.0071, 0.00382, 0.00146, 0.00135, 0.00114 },
        // 2004
        { 0, 0, 0.09093, 0.25203, 0.56264, 0.07703, 0.00422, 0.0054, 0.00524, 0.00252 },
        // 2005
        { 0, 0, 0.11864, 0.07398, 0.36904, 0.34694, 0.07696, 0.00771, 0.00511, 0.00163 },
        // 2006
        { 0, 0, 0.16843, 0.0477, 0.07202, 0.23139, 0.3099, 0.1333, 0.02852, 0.00874 },
        // 2007
        { 0, 0, 0.60203, 0.10211, 0.03491, 0.05947, 0.11841, 0.07179, 0.0053, 0.00598 },
        // 2008
        { 0, 0, 0.73212, 0.15601, 0.03524, 0.00635, 0.01194, 0.03126, 0.01961, 0.00748 },
        // 2009
        { 0, 0, 0.37288, 0.33386, 0.2037, 0.03353, 0.0098, 0.00289, 0.01717, 0.02617 },
        // 2010
        { 0, 0, 0.69074, 0.10974, 0.10255, 0.03705, 0.0153, 0.00709, 0.00682, 0.03071 },
        // 2012
        { 0, 0, 0.1459, 0.25793, 0.32129, 0.1551, 0.09797, 0.01506, 0.00381, 0.00296 },
        // 2013
        { 0, 0, 0.67265, 0.05096, 0.05763, 0.0956, 0.05456, 0.04114, 0.00998, 0.01747 },
        // 2014
        { 0, 0, 0.02855, 0.44159, 0.12988, 0.08743, 0.14878, 0.08213, 0.03855, 0.04309 },
        // 2015
        { 0, 0, 0.77863, 0.03436, 0.07257, 0.02963, 0.0269, 0.03225, 0.01421, 0.01146 }
    };

    int nyrs_srv1_prop_at_len = 25;
    std::vector<int> yrs_srv1_prop_at_len = { 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38 };
    std::vector<T> obs_srv_1_prop_at_len_N = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    atl::RealMatrix<T> obs_srv_1_prop_at_len = {
        // 1    2    3    4    5    6    7
        // 1981
        { 0, 0.34311, 0.28693, 0.27433, 0.08289, 0.01117, 0.00158 },
        // 1983
        { 0, 0.1706, 0.08509, 0.4347, 0.28821, 0.02004, 0.00135 },
        // 1984
        { 0, 0.02162, 0.10538, 0.24059, 0.60005, 0.02974, 0.00262 },
        // 1985
        { 0, 0.24669, 0.03893, 0.21068, 0.44584, 0.05352, 0.00434 },
        // 1986
        { 0, 0.76651, 0.06671, 0.01491, 0.11445, 0.03496, 0.00246 },
        // 1988
        { 0, 0.12909, 0.73186, 0.10552, 0.01889, 0.01133, 0.0033 },
        // 1989
        { 0, 0.12326, 0.22184, 0.5162, 0.1052, 0.02553, 0.00797 },
        // 1990
        { 0, 0.70207, 0.053, 0.10296, 0.11661, 0.01946, 0.00591 },
        // 1991
        { 0, 0.32644, 0.38111, 0.05796, 0.15333, 0.06057, 0.02058 },
        // 1992
        { 0, 0.03267, 0.25621, 0.29955, 0.19125, 0.16542, 0.0549 },
        // 1993
        { 0, 0.1041, 0.04357, 0.38434, 0.31357, 0.10226, 0.05216 },
        // 1994
        { 0, 0.06166, 0.07409, 0.05655, 0.48097, 0.19572, 0.13102 },
        // 1995
        { 0, 0.39722, 0.04685, 0.06655, 0.32947, 0.13052, 0.02939 },
        // 1996
        { 0, 0.83754, 0.02651, 0.00404, 0.05257, 0.06397, 0.01537 },
        // 1997
        { 0, 0.41854, 0.39933, 0.02732, 0.03203, 0.09147, 0.03132 },
        // 1998
        { 0, 0.09065, 0.45581, 0.25088, 0.0414, 0.10548, 0.05578 },
        // 2000
        { 0, 0.59352, 0.15457, 0.06494, 0.11827, 0.04056, 0.02814 },
        // 2001
        { 0, 0.90094, 0.06373, 0.01379, 0.0112, 0.00588, 0.00446 },
        // 2002
        { 0, 0.56292, 0.38993, 0.02004, 0.01366, 0.00989, 0.00356 },
        // 2003
        { 0, 0.06432, 0.7678, 0.14169, 0.0178, 0.00545, 0.00295 },
        // 2004
        { 0, 0.10393, 0.22207, 0.43907, 0.20311, 0.02376, 0.00805 },
        // 2005
        { 0, 0.2451, 0.07352, 0.19145, 0.42568, 0.05375, 0.01049 },
        // 2006
        { 0, 0.77115, 0.04127, 0.01563, 0.07677, 0.07282, 0.02236 },
        // 2007
        { 0, 0.4655, 0.30824, 0.05659, 0.05012, 0.07243, 0.04712 },
        // 2008
        { 0, 0.55127, 0.29407, 0.09259, 0.02593, 0.00914, 0.027 }
    };

    std::vector<T> yrfrac_srv_1 = { 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209 };
    atl::RealMatrix<T> obs_srv_1_wt_at_age = {
        // 1970
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1971
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1972
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1973
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1974
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1975
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1976
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1977
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1978
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1979
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1980
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1981
        { 0.01, 0.09, 0.23, 0.33, 0.38, 0.47, 0.63, 0.72, 0.86, 0.78 },
        // 1982
        { 0.01, 0.09, 0.23, 0.33, 0.38, 0.47, 0.63, 0.72, 0.86, 0.78 },
        // 1983
        { 0.01, 0.078, 0.294, 0.386, 0.521, 0.606, 0.515, 0.675, 0.695, 0.865 },
        // 1984
        { 0.01, 0.105, 0.234, 0.423, 0.557, 0.663, 0.704, 0.691, 0.77, 0.927 },
        // 1985
        { 0.01, 0.104, 0.266, 0.502, 0.591, 0.717, 0.792, 0.815, 0.812, 1.088 },
        // 1986
        { 0.01, 0.065, 0.19, 0.286, 0.727, 0.826, 0.874, 0.935, 0.95, 1.055 },
        // 1987
        { 0.01, 0.067, 0.187, 0.282, 0.559, 0.67, 0.917, 1.012, 1.026, 1.143 },
        // 1988
        { 0.01, 0.069, 0.185, 0.278, 0.39, 0.513, 0.96, 1.09, 1.102, 1.23 },
        // 1989
        { 0.01, 0.091, 0.234, 0.404, 0.455, 0.633, 0.911, 1.076, 1.178, 1.276 },
        // 1990
        { 0.01, 0.059, 0.209, 0.339, 0.525, 0.647, 0.771, 0.958, 1.075, 1.246 },
        // 1991
        { 0.01, 0.072, 0.152, 0.263, 0.493, 0.758, 0.874, 0.919, 1.13, 1.436 },
        // 1992
        { 0.01, 0.086, 0.209, 0.316, 0.384, 0.782, 1.052, 1.122, 1.052, 1.23 },
        // 1993
        { 0.01, 0.083, 0.302, 0.461, 0.576, 0.697, 1.023, 1.172, 1.161, 1.297 },
        // 1994
        { 0.01, 0.087, 0.269, 0.588, 0.763, 0.838, 1.03, 1.138, 1.322, 1.314 },
        // 1995
        { 0.01, 0.083, 0.278, 0.506, 0.798, 0.897, 0.952, 1.03, 1.146, 1.356 },
        // 1996
        { 0.01, 0.052, 0.196, 0.433, 0.906, 1.019, 1.039, 1.099, 1.2, 1.347 },
        // 1997
        { 0.01, 0.076, 0.15, 0.325, 0.687, 1.172, 1.15, 1.216, 1.256, 1.377 },
        // 1998
        { 0.01, 0.09, 0.224, 0.319, 0.375, 0.82, 1.165, 1.247, 1.244, 1.33 },
        // 1999
        { 0.01, 0.082, 0.238, 0.419, 0.561, 0.781, 1.051, 1.236, 1.328, 1.401 },
        // 2000
        { 0.01, 0.074, 0.251, 0.52, 0.746, 0.742, 0.938, 1.225, 1.413, 1.473 },
        // 2001
        { 0.01, 0.053, 0.171, 0.402, 0.621, 1.011, 1.115, 1.334, 1.298, 1.702 },
        // 2002
        { 0.01, 0.075, 0.138, 0.278, 0.68, 0.946, 1.172, 1.23, 1.539, 1.778 },
        // 2003
        { 0.01, 0.088, 0.205, 0.268, 0.394, 0.862, 1.185, 1.214, 1.659, 1.725 },
        // 2004
        { 0.01, 0.087, 0.25, 0.464, 0.475, 0.688, 1.312, 1.332, 1.364, 1.321 },
        // 2005
        { 0.01, 0.084, 0.292, 0.538, 0.79, 0.739, 0.803, 1.208, 1.256, 1.806 },
        // 2006
        { 0.01, 0.066, 0.265, 0.421, 0.794, 1.115, 1.157, 1.304, 1.453, 1.75 },
        // 2007
        { 0.01, 0.063, 0.222, 0.446, 0.841, 1.248, 1.378, 1.439, 1.789, 1.896 },
        // 2008
        { 0.01, 0.099, 0.267, 0.484, 0.795, 1.373, 1.89, 1.869, 1.882, 2.014 },
        // 2009
        { 0.01, 0.078, 0.262, 0.522, 0.734, 1.07, 1.658, 2.014, 2.103, 2.067 },
        // 2010
        { 0.01, 0.079, 0.24, 0.673, 1.093, 1.287, 1.828, 2.09, 2.291, 2.227 },
        // 2011
        { 0.01, 0.079, 0.256, 0.663, 1.011, 1.311, 1.657, 1.822, 2.11, 2.083 },
        // 2012
        { 0.01, 0.079, 0.272, 0.653, 0.928, 1.335, 1.485, 1.554, 1.93, 1.939 },
        // 2013
        { 0.009, 0.127, 0.347, 0.626, 1.157, 1.371, 1.6, 1.772, 1.849, 2.262 },
        // 2014
        { 0.012, 0.058, 0.304, 0.594, 0.712, 1.294, 1.336, 1.531, 1.572, 1.666 },
        // 2015
        { 0.013, 0.094, 0.2, 0.542, 0.88, 1.055, 1.43, 1.498, 1.594, 1.654 }
    };

    // NMFS bottom trawl survey
    int nyrs_srv2 = 12;
    std::vector<int> yrs_srv2 = { 20, 23, 26, 29, 31, 33, 35, 37, 39, 41, 43, 45 };
    std::vector<T> obs_srv_2_biomass = { 817040.061, 747942.33, 659603.963, 601968.515, 220140.54, 394333.355, 354208.896, 278540.575, 662556.59, 660207.116, 947876.763, 705442.986 };
    std::vector<T> obs_srv_2_CV = { 0.117026651, 0.159023699, 0.145984725, 0.383779365, 0.297659341, 0.12011675, 0.153660591, 0.138519958, 0.152453286, 0.145764033, 0.21086392, 0.160163319 };

    int nyrs_srv2_prop_at_age = 11;
    int age_young_srv2 = 1 - 1;
    int age_old_srv2 = 10 - 1;
    std::vector<int> yrs_srv2_prop_at_age = { 20, 23, 26, 29, 31, 33, 35, 37, 39, 41, 43 };
    std::vector<T> obs_srv_2_prop_at_age_N = { 27.87288401, 27.87288401, 27.87288401, 27.87288401, 27.87288401, 27.87288401, 27.87288401, 27.87288401, 27.87288401, 27.87288401, 27.87288401 };
    atl::RealMatrix<T> obs_srv_2_prop_at_age = {
        // 1990
        { 0.05583, 0.21898, 0.04213, 0.04069, 0.18286, 0.20992, 0.06486, 0.09624, 0.02277, 0.06571 },
        // 1993
        { 0.13444, 0.06866, 0.04915, 0.17656, 0.25778, 0.08831, 0.03196, 0.06657, 0.07394, 0.05264 },
        // 1996
        { 0.2185, 0.14488, 0.01946, 0.0294, 0.0563, 0.07107, 0.1962, 0.09857, 0.05892, 0.1067 },
        // 1999
        { 0.1516, 0.02648, 0.02893, 0.09223, 0.16432, 0.07847, 0.08156, 0.06591, 0.07792, 0.23259 },
        // 2001
        { 0.57642, 0.16341, 0.04806, 0.04662, 0.03498, 0.04671, 0.05167, 0.01145, 0.00802, 0.01265 },
        // 2003
        { 0.13198, 0.03218, 0.22458, 0.24615, 0.12815, 0.07821, 0.06313, 0.0442, 0.02538, 0.02604 },
        // 2005
        { 0.42465, 0.05297, 0.05405, 0.05632, 0.14415, 0.1238, 0.07105, 0.03277, 0.01509, 0.02514 },
        // 2007
        { 0.32556, 0.17953, 0.16576, 0.06942, 0.03598, 0.03536, 0.10286, 0.05822, 0.01243, 0.01488 },
        // 2009
        { 0.27071, 0.10605, 0.1297, 0.15707, 0.12296, 0.03304, 0.02136, 0.0323, 0.06546, 0.06135 },
        // 2011
        { 0.27369, 0.10612, 0.12145, 0.11169, 0.17954, 0.1185, 0.03647, 0.00783, 0.00624, 0.03848 },
        // 2013
        { 0.50972, 0.04218, 0.03258, 0.04446, 0.05761, 0.09839, 0.10684, 0.07872, 0.01709, 0.01242 }
    };

    int nyrs_srv2_prop_at_len = 8;
    std::vector<int> yrs_srv2_prop_at_len = { 29, 31, 35, 37, 39, 41, 43, 45 };
    std::vector<T> obs_srv_2_prop_at_len_N = { 0, 0, 0, 0, 0, 0, 0, 15 };
    atl::RealMatrix<T> obs_srv_2_prop_at_len = {
        // 1    2    3    4    5    6    7
        // 1999
        { 0, 0.04123851, 0.065115358, 0.14540564, 0.261895125, 0.235681114, 0.250664252 },
        // 2001
        { 0, 0.175700574, 0.098477562, 0.11900566, 0.192064743, 0.215975754, 0.198775707 },
        // 2005
        { 0, 0.109420865, 0.091648228, 0.131212577, 0.320876607, 0.2102222, 0.136619523 },
        // 2007
        { 0, 0.349893201, 0.177801959, 0.061118009, 0.065201867, 0.130713967, 0.215270998 },
        // 2009
        { 0, 0.144370251, 0.161963889, 0.106148834, 0.154561956, 0.128142854, 0.304812216 },
        // 2011
        { 0, 0.136764866, 0.154886783, 0.110655795, 0.167714335, 0.179696951, 0.250281271 },
        // 2013
        { 0.6137, 0.03752943, 0.016282548, 0.013791951, 0.036563773, 0.113701782, 0.168433297 },
        // 2015
        { 0.1113, 0.136367266, 0.329807517, 0.083441926, 0.091011559, 0.112390018, 0.135677866 }
    };

    std::vector<T> yrfrac_srv_2 = { 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.543, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584, 0.584 };
    atl::RealMatrix<T> obs_srv_2_wt_at_age = {
        // 1970
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1971
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1972
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1973
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1974
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1975
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1976
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1977
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1978
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1979
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1980
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1981
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1982
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1983
        { 0.038, 0.149, 0.527, 0.659, 0.737, 0.833, 0.904, 0.96, 0.991, 1.245 },
        // 1984
        { 0.038, 0.149, 0.527, 0.659, 0.737, 0.833, 0.904, 0.96, 0.991, 1.245 },
        // 1985
        { 0.038, 0.149, 0.527, 0.659, 0.737, 0.833, 0.904, 0.96, 0.991, 1.245 },
        // 1986
        { 0.038, 0.163, 0.364, 0.556, 0.763, 0.909, 1.007, 1.061, 1.154, 1.36 },
        // 1987
        { 0.038, 0.163, 0.364, 0.556, 0.763, 0.909, 1.007, 1.061, 1.154, 1.36 },
        // 1988
        { 0.038, 0.163, 0.364, 0.556, 0.763, 0.909, 1.007, 1.061, 1.154, 1.36 },
        // 1989
        { 0.038, 0.168, 0.301, 0.565, 0.767, 0.893, 1.101, 1.127, 1.258, 1.492 },
        // 1990
        { 0.038, 0.168, 0.301, 0.565, 0.767, 0.893, 1.101, 1.127, 1.258, 1.492 },
        // 1991
        { 0.038, 0.168, 0.301, 0.565, 0.767, 0.893, 1.101, 1.127, 1.258, 1.492 },
        // 1992
        { 0.038, 0.163, 0.461, 0.676, 0.788, 0.924, 1.03, 1.303, 1.358, 1.394 },
        // 1993
        { 0.038, 0.163, 0.461, 0.676, 0.788, 0.924, 1.03, 1.303, 1.358, 1.394 },
        // 1994
        { 0.038, 0.163, 0.461, 0.676, 0.788, 0.924, 1.03, 1.303, 1.358, 1.394 },
        // 1995
        { 0.038, 0.096, 0.309, 0.663, 0.924, 0.992, 1.085, 1.199, 1.281, 1.451 },
        // 1996
        { 0.038, 0.096, 0.309, 0.663, 0.924, 0.992, 1.085, 1.199, 1.281, 1.451 },
        // 1997
        { 0.038, 0.096, 0.309, 0.663, 0.924, 0.992, 1.085, 1.199, 1.281, 1.451 },
        // 1998
        { 0.038, 0.145, 0.354, 0.594, 0.718, 0.809, 0.873, 1.086, 1.247, 1.312 },
        // 1999
        { 0.038, 0.145, 0.354, 0.594, 0.718, 0.809, 0.873, 1.086, 1.247, 1.312 },
        // 2000
        { 0.038, 0.125, 0.383, 0.648, 0.824, 0.938, 1.041, 1.254, 1.274, 1.401 },
        // 2001
        { 0.038, 0.105, 0.412, 0.702, 0.93, 1.066, 1.208, 1.422, 1.3, 1.491 },
        // 2002
        { 0.038, 0.153, 0.455, 0.648, 0.84, 1.01, 1.18, 1.288, 1.344, 1.511 },
        // 2003
        { 0.038, 0.201, 0.498, 0.595, 0.751, 0.954, 1.152, 1.154, 1.388, 1.531 },
        // 2004
        { 0.038, 0.184, 0.424, 0.606, 0.793, 0.924, 1.075, 1.209, 1.344, 1.539 },
        // 2005
        { 0.038, 0.167, 0.351, 0.617, 0.834, 0.895, 0.998, 1.263, 1.299, 1.546 },
        // 2006
        { 0.038, 0.158, 0.33, 0.604, 0.913, 1.05, 1.21, 1.374, 1.532, 1.646 },
        // 2007
        { 0.038, 0.15, 0.31, 0.592, 0.991, 1.205, 1.423, 1.485, 1.765, 1.746 },
        // 2008
        { 0.038, 0.219, 0.453, 0.815, 1.147, 1.457, 1.695, 1.846, 2.056, 2.086 },
        // 2009
        { 0.038, 0.288, 0.595, 1.038, 1.302, 1.708, 1.966, 2.208, 2.347, 2.425 },
        // 2010
        { 0.038, 0.258, 0.531, 0.927, 1.228, 1.551, 1.708, 1.859, 2.049, 2.073 },
        // 2011
        { 0.038, 0.227, 0.467, 0.817, 1.153, 1.394, 1.45, 1.509, 1.751, 1.721 },
        // 2012
        { 0.038, 0.222, 0.445, 0.859, 1.152, 1.367, 1.477, 1.545, 1.713, 1.889 },
        // 2013
        { 0.038, 0.216, 0.423, 0.901, 1.151, 1.34, 1.503, 1.581, 1.674, 2.056 },
        // 2014
        { 0.038, 0.216, 0.423, 0.901, 1.151, 1.34, 1.503, 1.581, 1.674, 2.056 },
        // 2015
        { 0.038, 0.216, 0.423, 0.901, 1.151, 1.34, 1.503, 1.581, 1.674, 2.056 }
    };


    // ADF&G nearshore trawl survey
    int nyrs_srv3 = 25;
    std::vector<int> yrs_srv3 = { 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 };
    std::vector<T> obs_srv_3_biomass = { 214430, 114450, 127360, 132850, 103420, 122480, 93730, 81220, 53590, 102870, 86970, 96237, 66989, 99358, 79089, 69044, 76674, 83476, 145438, 124110, 100839, 172007, 102406, 100158, 42277 };
    std::vector<T> obs_srv_3_CV = { 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25 };

    int nyrs_srv3_prop_at_age = 16;
    std::vector<int> yrs_srv3_prop_at_age = { 19, 20, 22, 23, 24, 26, 27, 28, 30, 32, 34, 36, 38, 40, 42, 44 };
    std::vector<T> obs_srv_3_prop_at_age_N = { 0, 0, 0, 0, 0, 0, 0, 0, 30, 30, 30, 30, 30, 30, 30, 30 };
    atl::RealMatrix<T> obs_srv_3_prop_at_age = {
        // 1989
        { 0, 0.01587, 0.01975, 0.18064, 0.31108, 0.18503, 0.11148, 0.06147, 0.035448833, 0.07924 },
        // 1990
        { 0, 0.04474, 0.0204, 0.0376, 0.10328, 0.33932, 0.14045, 0.15211, 0.048252854, 0.11385 },
        // 1992
        { 0, 0.02645, 0.02791, 0.08342, 0.11674, 0.08555, 0.10218, 0.23131, 0.094368531, 0.23206 },
        // 1993
        { 0, 0.02645, 0.02791, 0.08342, 0.11674, 0.08555, 0.10218, 0.23131, 0.094368531, 0.23206 },
        // 1994
        { 0, 0.22995, 0.31027, 0.08385, 0.26917, 0.05719, 0.01347, 0.00771, 0.010781493, 0.01762 },
        // 1996
        { 0, 0.12134, 0.02264, 0.01822, 0.05592, 0.0969, 0.19635, 0.23501, 0.081976157, 0.17164 },
        // 1997
        { 0, 0.05892, 0.15373, 0.06154, 0.0473, 0.08508, 0.11858, 0.20422, 0.155097525, 0.11553 },
        // 1998
        { 0, 0.00908, 0.0706, 0.13416, 0.09965, 0.07376, 0.09875, 0.12523, 0.184458676, 0.20431 },
        // 2000
        { 0.03717, 0.02602, 0.0948, 0.07807, 0.1171, 0.17658, 0.10781, 0.0539, 0.06506, 0.243494424 },
        // 2002
        { 0.00929, 0.07435, 0.18401, 0.19331, 0.1487, 0.1171, 0.10595, 0.07063, 0.04461, 0.05204461 },
        // 2004
        { 0.00505, 0.00842, 0.05724, 0.19865, 0.26263, 0.14983, 0.10774, 0.06734, 0.05892, 0.084175084 },
        // 2006
        { 0.00508, 0.0423, 0.11168, 0.08291, 0.14721, 0.30118, 0.16582, 0.05922, 0.03553, 0.049069374 },
        // 2008
        { 0, 0.03518, 0.40704, 0.134, 0.0536, 0.067, 0.04355, 0.1541, 0.04523, 0.060301508 },
        // 2010
        { 0.00171, 0.04444, 0.14017, 0.26496, 0.25983, 0.08376, 0.05641, 0.0188, 0.03761, 0.092307692 },
        // 2012
        { 0.0177, 0.02124, 0.06372, 0.10265, 0.15752, 0.29912, 0.1823, 0.0708, 0.03009, 0.054867257 },
        // 2014
        { 0, 0.01858, 0.05405, 0.16047, 0.13514, 0.14358, 0.15878, 0.19426, 0.08277, 0.052364865 }
    };

    int nyrs_srv3_prop_at_len = 23;
    std::vector<int> yrs_srv3_prop_at_len = { 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 };
    std::vector<T> obs_srv_3_prop_at_len_N = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    atl::RealMatrix<T> obs_srv_3_prop_at_len = {
        // 1    2    3    4    5    6    7
        // 1989
        { 0.03672, 0.03011, 0.14114, 0.19086, 0.21189, 0.20459, 0.18468 },
        // 1990
        { 0.03574, 0.02935, 0.08467, 0.14255, 0.27338, 0.23093, 0.20338 },
        // 1992
        { 0.00854, 0.05615, 0.07863, 0.10779, 0.19337, 0.25467, 0.30085 },
        // 1993
        { 0.00376, 0.0259, 0.04618, 0.12911, 0.2497, 0.29897, 0.24638 },
        // 1994
        { 0.03117, 0.2741, 0.30818, 0.17197, 0.14477, 0.0549, 0.01492 },
        // 1996
        { 0.037, 0.05409, 0.01605, 0.02293, 0.1285, 0.39433, 0.34709 },
        // 1997
        { 0.01729, 0.10388, 0.11113, 0.06648, 0.06638, 0.25203, 0.3828 },
        // 1998
        { 0.00908, 0.02007, 0.10527, 0.07594, 0.12699, 0.27993, 0.38272 },
        // 1999
        { 0.00356, 0.00625, 0.05778, 0.17135, 0.28625, 0.21302, 0.26178 },
        // 2000
        { 0.00693, 0.00924, 0.03771, 0.04016, 0.22551, 0.37184, 0.30862 },
        // 2001
        { 0.00577, 0.07557, 0.06425, 0.07648, 0.1698, 0.28681, 0.32132 },
        // 2002
        { 0.00293, 0.11233, 0.11066, 0.14059, 0.18635, 0.21081, 0.23632 },
        // 2003
        { 0.00408, 0.03226, 0.14829, 0.18216, 0.27077, 0.18684, 0.17561 },
        // 2004
        { 0.001, 0.01465, 0.06458, 0.19284, 0.33914, 0.25744, 0.13036 },
        // 2005
        { 0.00758, 0.00695, 0.0308, 0.07326, 0.30569, 0.35205, 0.22367 },
        // 2006
        { 0.01048, 0.00629, 0.03909, 0.06711, 0.18486, 0.28563, 0.40654 },
        // 2007
        { 0.01045, 0.06145, 0.04571, 0.05234, 0.131, 0.22423, 0.47481 },
        // 2008
        { 0.00428, 0.03175, 0.15231, 0.21619, 0.162, 0.10376, 0.32971 },
        // 2009
        { 0.00297, 0.04103, 0.08898, 0.15433, 0.22257, 0.1923, 0.29782 },
        // 2010
        { 0.00649, 0.01697, 0.05142, 0.10616, 0.22033, 0.21841, 0.38022 },
        // 2011
        { 0.00479, 0.05495, 0.0571, 0.07199, 0.13168, 0.23111, 0.44838 },
        // 2012
        { 0.00295, 0.02163, 0.0341, 0.07135, 0.19807, 0.29765, 0.37425 },
        // 2013
        { 0.11691, 0.01061, 0.0528, 0.03545, 0.08141, 0.23476, 0.46806 }
    };

    std::vector<T> yrfrac_srv_3 = { 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989, 0.60989 };
    atl::RealMatrix<T> obs_srv_3_wt_at_age = {
        // 1970
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1971
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1972
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1973
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1974
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1975
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1976
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1977
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1978
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1979
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1980
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1981
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1982
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1983
        { 0.038, 0.149, 0.527, 0.659, 0.737, 0.833, 0.904, 0.96, 0.991, 1.245 },
        // 1984
        { 0.038, 0.149, 0.527, 0.659, 0.737, 0.833, 0.904, 0.96, 0.991, 1.245 },
        // 1985
        { 0.038, 0.149, 0.527, 0.659, 0.737, 0.833, 0.904, 0.96, 0.991, 1.245 },
        // 1986
        { 0.038, 0.163, 0.364, 0.556, 0.763, 0.909, 1.007, 1.061, 1.154, 1.36 },
        // 1987
        { 0.038, 0.163, 0.364, 0.556, 0.763, 0.909, 1.007, 1.061, 1.154, 1.36 },
        // 1988
        { 0.038, 0.163, 0.364, 0.556, 0.763, 0.909, 1.007, 1.061, 1.154, 1.36 },
        // 1989
        { 0.038, 0.168, 0.301, 0.565, 0.767, 0.893, 1.101, 1.127, 1.258, 1.492 },
        // 1990
        { 0.038, 0.168, 0.301, 0.565, 0.767, 0.893, 1.101, 1.127, 1.258, 1.492 },
        // 1991
        { 0.038, 0.168, 0.301, 0.565, 0.767, 0.893, 1.101, 1.127, 1.258, 1.492 },
        // 1992
        { 0.038, 0.163, 0.461, 0.676, 0.788, 0.924, 1.03, 1.303, 1.358, 1.394 },
        // 1993
        { 0.038, 0.163, 0.461, 0.676, 0.788, 0.924, 1.03, 1.303, 1.358, 1.394 },
        // 1994
        { 0.038, 0.163, 0.461, 0.676, 0.788, 0.924, 1.03, 1.303, 1.358, 1.394 },
        // 1995
        { 0.038, 0.096, 0.309, 0.663, 0.924, 0.992, 1.085, 1.199, 1.281, 1.451 },
        // 1996
        { 0.038, 0.096, 0.309, 0.663, 0.924, 0.992, 1.085, 1.199, 1.281, 1.451 },
        // 1997
        { 0.038, 0.096, 0.309, 0.663, 0.924, 0.992, 1.085, 1.199, 1.281, 1.451 },
        // 1998
        { 0.038, 0.145, 0.354, 0.594, 0.718, 0.809, 0.873, 1.086, 1.247, 1.312 },
        // 1999
        { 0.038, 0.145, 0.354, 0.594, 0.718, 0.809, 0.873, 1.086, 1.247, 1.312 },
        // 2000
        { 0.038, 0.125, 0.383, 0.648, 0.824, 0.938, 1.041, 1.254, 1.274, 1.401 },
        // 2001
        { 0.038, 0.105, 0.412, 0.702, 0.93, 1.066, 1.208, 1.422, 1.3, 1.491 },
        // 2002
        { 0.038, 0.153, 0.455, 0.648, 0.84, 1.01, 1.18, 1.288, 1.344, 1.511 },
        // 2003
        { 0.038, 0.201, 0.498, 0.595, 0.751, 0.954, 1.152, 1.154, 1.388, 1.531 },
        // 2004
        { 0.038, 0.184, 0.424, 0.606, 0.793, 0.924, 1.075, 1.209, 1.344, 1.539 },
        // 2005
        { 0.038, 0.167, 0.351, 0.617, 0.834, 0.895, 0.998, 1.263, 1.299, 1.546 },
        // 2006
        { 0.038, 0.158, 0.33, 0.604, 0.913, 1.05, 1.21, 1.374, 1.532, 1.646 },
        // 2007
        { 0.038, 0.15, 0.31, 0.592, 0.991, 1.205, 1.423, 1.485, 1.765, 1.746 },
        // 2008
        { 0.038, 0.219, 0.453, 0.815, 1.147, 1.457, 1.695, 1.846, 2.056, 2.086 },
        // 2009
        { 0.038, 0.288, 0.595, 1.038, 1.302, 1.708, 1.966, 2.208, 2.347, 2.425 },
        // 2010
        { 0.038, 0.258, 0.531, 0.927, 1.228, 1.551, 1.708, 1.859, 2.049, 2.073 },
        // 2011
        { 0.038, 0.227, 0.467, 0.817, 1.153, 1.394, 1.45, 1.509, 1.751, 1.721 },
        // 2012
        { 0.038, 0.222, 0.445, 0.859, 1.152, 1.367, 1.477, 1.545, 1.713, 1.889 },
        // 2013
        { 0.038, 0.216, 0.423, 0.901, 1.151, 1.34, 1.503, 1.581, 1.674, 2.056 },
        // 2014
        { 0.038, 0.216, 0.423, 0.901, 1.151, 1.34, 1.503, 1.581, 1.674, 2.056 },
        // 2015
        { 0.038, 0.216, 0.423, 0.901, 1.151, 1.34, 1.503, 1.581, 1.674, 2.056 }
    };


    // age-1 acoustic survey
    int nyrs_srv4 = 15;
    std::vector<int> yrs_srv4 = { 24, 25, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45 };
    std::vector<T> obs_srv_4_biomass = { 0.186, 10.698, 0.394, 0.008, 0.051, 1.626, 1.909, 0.170, 2.867, 2.498, 0.097170701, 0.094952138, 12.93527425, 0.707935349, 0.021684248 };
    std::vector<T> obs_srv_4_CV = { 1.19885, 1.19885, 1.19885, 1.19885, 1.19885, 1.19885, 1.19885, 1.19885, 1.19885, 1.19885, 1.19885, 1.19885, 1.19885, 1.19885, 1.19885 };


    // age-2 acoustic survey
    int nyrs_srv5 = 15;
    std::vector<int> yrs_srv5 = { 24, 25, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45 };
    std::vector<T> obs_srv_5_biomass = { 0.036, 0.510, 4.267, 0.216, 0.095, 0.158, 0.857, 0.485, 0.406, 1.335, 0.334, 0.852, 0.150, 4.142770361, 0.173710023 };
    std::vector<T> obs_srv_5_CV = { 0.889551, 0.889551, 0.889551, 0.889551, 0.889551, 0.889551, 0.889551, 0.889551, 0.889551, 0.889551, 0.889551, 0.889551, 0.889551, 0.889551, 0.889551 };


    // summer survey
    int nyrs_srv6 = 2;
    std::vector<int> yrs_srv6 = { 43, 45 };
    std::vector<T> obs_srv_6_biomass = { 884048.507, 1482668.245 };
    std::vector<T> obs_srv_6_CV = { 0.25, 0.25 };

    int nyrs_srv6_prop_at_age = 1;
    int age_young_srv6 = 1 - 1;
    int age_old_srv6 = 10 - 1;
    std::vector<int> yrs_srv6_prop_at_age = { 43 };
    std::vector<T> obs_srv_6_prop_at_age_N = { 10 };
    atl::RealMatrix<T> obs_srv_6_prop_at_age = {
        // 2013
        { 0.9031, 0.0105, 0.04249, 0.00661, 0.00834, 0.01234, 0.00972, 0.00442, 0.00125, 0.00122 }
    };

    int nyrs_srv6_prop_at_len = 1;
    std::vector<int> yrs_srv6_prop_at_len = { 45 };
    std::vector<T> obs_srv_6_prop_at_len_N = { 10 };
    atl::RealMatrix<T> obs_srv_6_prop_at_len = {
        // 1    2    3    4    5    6    7
        // 2015
        { 0.00358, 0.254522364, 0.616399601, 0.081953758, 0.018230721, 0.012025345, 0.013290562 }
    };

    std::vector<T> yrfrac_srv_6 = { 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519, 0.519 };
    atl::RealMatrix<T> obs_srv_6_wt_at_age = {
        // 1970
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1971
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1972
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1973
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1974
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1975
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1976
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1977
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1978
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1979
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1980
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1981
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1982
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1983
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1984
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1985
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1986
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1987
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1988
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1989
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1990
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1991
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1992
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1993
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1994
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1995
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1996
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1997
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1998
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 1999
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2000
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2001
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2002
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2003
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2004
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2005
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2006
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2007
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2008
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2009
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2010
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2011
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2012
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2013
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2014
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 },
        // 2015
        { 0.028, 0.235, 0.498, 0.812, 1.128, 1.257, 1.364, 1.443, 1.465, 1.783 }
    };

    int nsrvs = 6;

    atl::Variable<T> yrfrac_sp = 0.21;  // fraction of the year for spawning

    std::vector<T> M = { 1.39, 0.69, 0.48, 0.37, 0.34, 0.30, 0.30, 0.29, 0.28, 0.29 };
    // std::vector<T> M = { 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3 };
    std::vector<T> maturity_old = { 0, 0.034, 0.116, 0.325, 0.639, 0.867, 0.96, 0.989, 0.997, 1.0 };
    std::vector<T> maturity = { 0, 0.00047, 0.0156, 0.26413, 0.56377, 0.83147, 0.92048, 0.96569, 0.98681, 0.99269 };


    atl::RealMatrix<T> wt_pop = {
        // 1970
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1971
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1972
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1973
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1974
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1975
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1976
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1977
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1978
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1979
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1980
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1981
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1982
        { 0.038, 0.147, 0.386, 0.619, 0.783, 0.893, 1, 1.123, 1.215, 1.376 },
        // 1983
        { 0.038, 0.149, 0.527, 0.659, 0.737, 0.833, 0.904, 0.96, 0.991, 1.245 },
        // 1984
        { 0.038, 0.149, 0.527, 0.659, 0.737, 0.833, 0.904, 0.96, 0.991, 1.245 },
        // 1985
        { 0.038, 0.149, 0.527, 0.659, 0.737, 0.833, 0.904, 0.96, 0.991, 1.245 },
        // 1986
        { 0.038, 0.163, 0.364, 0.556, 0.763, 0.909, 1.007, 1.061, 1.154, 1.36 },
        // 1987
        { 0.038, 0.163, 0.364, 0.556, 0.763, 0.909, 1.007, 1.061, 1.154, 1.36 },
        // 1988
        { 0.038, 0.163, 0.364, 0.556, 0.763, 0.909, 1.007, 1.061, 1.154, 1.36 },
        // 1989
        { 0.038, 0.168, 0.301, 0.565, 0.767, 0.893, 1.101, 1.127, 1.258, 1.492 },
        // 1990
        { 0.038, 0.168, 0.301, 0.565, 0.767, 0.893, 1.101, 1.127, 1.258, 1.492 },
        // 1991
        { 0.038, 0.168, 0.301, 0.565, 0.767, 0.893, 1.101, 1.127, 1.258, 1.492 },
        // 1992
        { 0.038, 0.163, 0.461, 0.676, 0.788, 0.924, 1.03, 1.303, 1.358, 1.394 },
        // 1993
        { 0.038, 0.163, 0.461, 0.676, 0.788, 0.924, 1.03, 1.303, 1.358, 1.394 },
        // 1994
        { 0.038, 0.163, 0.461, 0.676, 0.788, 0.924, 1.03, 1.303, 1.358, 1.394 },
        // 1995
        { 0.038, 0.096, 0.309, 0.663, 0.924, 0.992, 1.085, 1.199, 1.281, 1.451 },
        // 1996
        { 0.038, 0.096, 0.309, 0.663, 0.924, 0.992, 1.085, 1.199, 1.281, 1.451 },
        // 1997
        { 0.038, 0.096, 0.309, 0.663, 0.924, 0.992, 1.085, 1.199, 1.281, 1.451 },
        // 1998
        { 0.038, 0.145, 0.354, 0.594, 0.718, 0.809, 0.873, 1.086, 1.247, 1.312 },
        // 1999
        { 0.038, 0.145, 0.354, 0.594, 0.718, 0.809, 0.873, 1.086, 1.247, 1.312 },
        // 2000
        { 0.038, 0.125, 0.383, 0.648, 0.824, 0.938, 1.041, 1.254, 1.274, 1.401 },
        // 2001
        { 0.038, 0.105, 0.412, 0.702, 0.93, 1.066, 1.208, 1.422, 1.3, 1.491 },
        // 2002
        { 0.038, 0.153, 0.455, 0.648, 0.84, 1.01, 1.18, 1.288, 1.344, 1.511 },
        // 2003
        { 0.038, 0.201, 0.498, 0.595, 0.751, 0.954, 1.152, 1.154, 1.388, 1.531 },
        // 2004
        { 0.038, 0.184, 0.424, 0.606, 0.793, 0.924, 1.075, 1.209, 1.344, 1.539 },
        // 2005
        { 0.038, 0.167, 0.351, 0.617, 0.834, 0.895, 0.998, 1.263, 1.299, 1.546 },
        // 2006
        { 0.038, 0.158, 0.33, 0.604, 0.913, 1.05, 1.21, 1.374, 1.532, 1.646 },
        // 2007
        { 0.038, 0.15, 0.31, 0.592, 0.991, 1.205, 1.423, 1.485, 1.765, 1.746 },
        // 2008
        { 0.038, 0.219, 0.453, 0.815, 1.147, 1.457, 1.695, 1.846, 2.056, 2.086 },
        // 2009
        { 0.038, 0.288, 0.595, 1.038, 1.302, 1.708, 1.966, 2.208, 2.347, 2.425 },
        // 2010
        { 0.038, 0.258, 0.531, 0.927, 1.228, 1.551, 1.708, 1.859, 2.049, 2.073 },
        // 2011
        { 0.038, 0.227, 0.467, 0.817, 1.153, 1.394, 1.45, 1.509, 1.751, 1.721 },
        // 2012
        { 0.038, 0.222, 0.445, 0.859, 1.152, 1.367, 1.477, 1.545, 1.713, 1.889 },
        // 2013
        { 0.038, 0.216, 0.423, 0.901, 1.151, 1.34, 1.503, 1.581, 1.674, 2.056 },
        // 2014
        { 0.038, 0.216, 0.423, 0.901, 1.151, 1.34, 1.503, 1.581, 1.674, 2.056 },
        // 2015
        { 0.038, 0.216, 0.423, 0.901, 1.151, 1.34, 1.503, 1.581, 1.674, 2.056 }
    };

    atl::RealMatrix<T> wt_spawn = {
        // 1970
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1971
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1972
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1973
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1974
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1975
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1976
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1977
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1978
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1979
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1980
        { 0.01, 0.08, 0.235, 0.402, 0.58, 0.755, 0.901, 1.002, 1.066, 1.227 },
        // 1981
        { 0.01, 0.09, 0.23, 0.33, 0.38, 0.47, 0.63, 0.72, 0.86, 0.78 },
        // 1982
        { 0.01, 0.09, 0.23, 0.33, 0.38, 0.47, 0.63, 0.72, 0.86, 0.78 },
        // 1983
        { 0.01, 0.078, 0.294, 0.386, 0.521, 0.606, 0.515, 0.675, 0.695, 0.865 },
        // 1984
        { 0.01, 0.105, 0.234, 0.423, 0.557, 0.663, 0.704, 0.691, 0.77, 0.927 },
        // 1985
        { 0.01, 0.104, 0.266, 0.502, 0.591, 0.717, 0.792, 0.815, 0.812, 1.088 },
        // 1986
        { 0.01, 0.065, 0.19, 0.286, 0.727, 0.826, 0.874, 0.935, 0.95, 1.055 },
        // 1987
        { 0.01, 0.067, 0.187, 0.282, 0.559, 0.67, 0.917, 1.012, 1.026, 1.143 },
        // 1988
        { 0.01, 0.069, 0.185, 0.278, 0.39, 0.513, 0.96, 1.09, 1.102, 1.23 },
        // 1989
        { 0.01, 0.091, 0.234, 0.404, 0.455, 0.633, 0.911, 1.076, 1.178, 1.276 },
        // 1990
        { 0.01, 0.059, 0.209, 0.339, 0.525, 0.647, 0.771, 0.958, 1.075, 1.246 },
        // 1991
        { 0.01, 0.072, 0.152, 0.263, 0.493, 0.758, 0.874, 0.919, 1.13, 1.436 },
        // 1992
        { 0.01, 0.086, 0.209, 0.316, 0.384, 0.782, 1.052, 1.122, 1.052, 1.23 },
        // 1993
        { 0.01, 0.083, 0.302, 0.461, 0.576, 0.697, 1.023, 1.172, 1.161, 1.297 },
        // 1994
        { 0.01, 0.087, 0.269, 0.588, 0.763, 0.838, 1.03, 1.138, 1.322, 1.314 },
        // 1995
        { 0.01, 0.083, 0.278, 0.506, 0.798, 0.897, 0.952, 1.03, 1.146, 1.356 },
        // 1996
        { 0.01, 0.052, 0.196, 0.433, 0.906, 1.019, 1.039, 1.099, 1.2, 1.347 },
        // 1997
        { 0.01, 0.076, 0.15, 0.325, 0.687, 1.172, 1.15, 1.216, 1.256, 1.377 },
        // 1998
        { 0.01, 0.09, 0.224, 0.319, 0.375, 0.82, 1.165, 1.247, 1.244, 1.33 },
        // 1999
        { 0.01, 0.082, 0.238, 0.419, 0.561, 0.781, 1.051, 1.236, 1.328, 1.401 },
        // 2000
        { 0.01, 0.074, 0.251, 0.52, 0.746, 0.742, 0.938, 1.225, 1.413, 1.473 },
        // 2001
        { 0.01, 0.053, 0.171, 0.402, 0.621, 1.011, 1.115, 1.334, 1.298, 1.702 },
        // 2002
        { 0.01, 0.075, 0.138, 0.278, 0.68, 0.946, 1.172, 1.23, 1.539, 1.778 },
        // 2003
        { 0.01, 0.088, 0.205, 0.268, 0.394, 0.862, 1.185, 1.214, 1.659, 1.725 },
        // 2004
        { 0.01, 0.087, 0.25, 0.464, 0.475, 0.688, 1.312, 1.332, 1.364, 1.321 },
        // 2005
        { 0.01, 0.084, 0.292, 0.538, 0.79, 0.739, 0.803, 1.208, 1.256, 1.806 },
        // 2006
        { 0.01, 0.066, 0.265, 0.421, 0.794, 1.115, 1.157, 1.304, 1.453, 1.75 },
        // 2007
        { 0.01, 0.063, 0.222, 0.446, 0.841, 1.248, 1.378, 1.439, 1.789, 1.896 },
        // 2008
        { 0.01, 0.099, 0.267, 0.484, 0.795, 1.373, 1.89, 1.869, 1.882, 2.014 },
        // 2009
        { 0.01, 0.078, 0.262, 0.522, 0.734, 1.07, 1.658, 2.014, 2.103, 2.067 },
        // 2010
        { 0.01, 0.079, 0.24, 0.673, 1.093, 1.287, 1.828, 2.09, 2.291, 2.227 },
        // 2011
        { 0.01, 0.079, 0.256, 0.663, 1.011, 1.311, 1.657, 1.822, 2.11, 2.083 },
        // 2012
        { 0.01, 0.079, 0.272, 0.653, 0.928, 1.335, 1.485, 1.554, 1.93, 1.939 },
        // 2013
        { 0.009, 0.127, 0.347, 0.626, 1.157, 1.371, 1.6, 1.772, 1.849, 2.262 },
        // 2014
        { 0.012, 0.058, 0.304, 0.594, 0.712, 1.294, 1.336, 1.531, 1.572, 1.666 },
        // 2015
        { 0.013, 0.094, 0.2, 0.542, 0.88, 1.055, 1.43, 1.498, 1.594, 1.654 }
    };

    std::vector<T> wt_pop_proj   = { 0.038, 0.244, 0.495, 0.919, 1.202, 1.481, 1.64, 1.766, 1.924, 2.068 };
    std::vector<T> wt_spawn_proj = { 0.011, 0.087, 0.272, 0.617, 0.954, 1.268, 1.536, 1.689, 1.847, 1.95 };
    std::vector<T> wt_fsh_proj   = { 0.121, 0.38, 0.679, 0.959, 1.187, 1.403, 1.561, 1.794, 2.003, 2.067 };
    std::vector<T> wt_srv_proj   = { 0.011, 0.087, 0.272, 0.617, 0.954, 1.268, 1.536, 1.689, 1.847, 1.95 };

    atl::RealMatrix<T> age_age_err = {
        { 0.997, 0.003, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0.0138, 0.9724, 0.0138, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0.0329, 0.9342, 0.0329, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0.0571, 0.8858, 0.0571, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0.0832, 0.8335, 0.0832, 0, 0, 0, 0 },
        { 0, 0, 0, 0.0001, 0.109, 0.7817, 0.109, 0.0001, 0, 0 },
        { 0, 0, 0, 0, 0.0004, 0.1333, 0.73246, 0.13333, 0.00044, 0 },
        { 0, 0, 0, 0, 0, 0.0012, 0.15535, 0.68681, 0.15535, 0.00124 },
        { 0, 0, 0, 0, 0, 0, 0.00276, 0.17473, 0.64502, 0.17749 },
        { 0, 0, 0, 0, 0, 0, 0.00001, 0.00519, 0.1913, 0.8035 }
    };

    int n_fsh_len_bins = 8;
    int n_srv_len_bins = 7;

    atl::RealMatrix<T> age_len_trans_1 = {
        { 1, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0.891, 0.109, 0, 0, 0, 0, 0 },
        { 0, 0.023, 0.722, 0.255, 0, 0, 0, 0 },
        { 0, 0, 0.07692, 0.72228, 0.1998, 0.001, 0, 0 },
        { 0, 0, 0.003, 0.25025, 0.66366, 0.08108, 0.002, 0 },
        { 0, 0, 0, 0.048, 0.547, 0.35, 0.053, 0.002 },
        { 0, 0, 0, 0.009, 0.28, 0.48, 0.21, 0.021 },
        { 0, 0, 0, 0.002, 0.126, 0.415, 0.369, 0.088 },
        { 0, 0, 0, 0.001, 0.058, 0.302, 0.443, 0.196 },
        { 0, 0, 0, 0, 0.011, 0.107, 0.345, 0.537 }
    };

    atl::RealMatrix<T> age_len_trans_2 = {
        { 1, 0, 0, 0, 0, 0, 0 },
        { 0, 0.79697, 0.17047, 0.03257, 0, 0, 0 },
        { 0, 0.1439, 0.67682, 0.15865, 0.02063, 0, 0 },
        { 0, 0.0123, 0.2392, 0.42706, 0.27136, 0.04874, 0.00134 },
        { 0, 0, 0.06816, 0.24529, 0.44758, 0.20363, 0.03534 },
        { 0, 0, 0.01921, 0.1372, 0.41037, 0.32757, 0.10564 },
        { 0, 0, 0.00341, 0.03514, 0.28073, 0.48306, 0.19766 },
        { 0, 0, 0, 0.00971, 0.16305, 0.5177, 0.30954 },
        { 0, 0, 0.00073, 0.00404, 0.15989, 0.44014, 0.39521 },
        { 0, 0, 0, 0.001, 0.08494, 0.38309, 0.53096 }
    };

    atl::RealMatrix<T> age_len_trans_3 = {
        { 1, 0, 0, 0, 0, 0, 0 },
        { 0, 0.98382, 0.01618, 0, 0, 0, 0 },
        { 0, 0.13582, 0.7119, 0.14867, 0.00361, 0, 0 },
        { 0, 0.00053, 0.32232, 0.46362, 0.20861, 0.00492, 0 },
        { 0, 0, 0.10396, 0.33603, 0.45891, 0.09451, 0.00659 },
        { 0, 0, 0.00538, 0.10485, 0.55865, 0.28488, 0.04624 },
        { 0, 0, 0, 0.01097, 0.42281, 0.44228, 0.12395 },
        { 0, 0, 0, 0.00212, 0.29841, 0.49866, 0.20081 },
        { 0, 0, 0, 0, 0.22048, 0.50593, 0.27359 },
        { 0, 0, 0, 0, 0.12718, 0.46008, 0.41274 }
    };

    // Transition standard deviations for random walk (endyr - styr) year for change
    // 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015
    std::vector<T> fsh_sel_sd = { 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.0001 };

    //Estimated(read only)
    atl::VariableVector<T> init_pop_devs;
    atl::VariableVector<T> initial_population;

    atl::Variable<T> log_mean_recruits;
    atl::VariableVector<T> recruit_devs;
    atl::VariableVector<T> recruits;

    int nyrs_proj = 5;
    atl::VariableVector<T> recruit_proj_devs;
    atl::VariableVector<T> recruit_proj;

    atl::Variable<T> log_h;
    atl::Variable<T> h;

    //selectivity model
    atl::Variable<T> log_fsh_sel_asc_alpha;
    atl::Variable<T> log_fsh_sel_asc_beta;
    atl::Variable<T> fsh_sel_asc_alpha;
    atl::Variable<T> fsh_sel_asc_beta;

    atl::Variable<T> log_fsh_sel_desc_alpha;
    atl::Variable<T> log_fsh_sel_desc_beta;
    atl::Variable<T> fsh_sel_desc_alpha;
    atl::Variable<T> fsh_sel_desc_beta;

    atl::VariableMatrix<T> fsh_sel;

    atl::VariableVector<T> fsh_sel_asc_alpha_devs;
    atl::VariableVector<T> fsh_sel_asc_beta_devs;
    atl::VariableVector<T> fsh_sel_desc_alpha_devs;
    atl::VariableVector<T> fsh_sel_desc_beta_devs;

    atl::Variable<T> log_srv1_sel_asc_alpha;
    atl::Variable<T> log_srv1_sel_asc_beta;
    atl::Variable<T> srv1_sel_asc_alpha;
    atl::Variable<T> srv1_sel_asc_beta;

    atl::Variable<T> log_srv1_sel_desc_alpha;
    atl::Variable<T> log_srv1_sel_desc_beta;
    atl::Variable<T> srv1_sel_desc_alpha;
    atl::Variable<T> srv1_sel_desc_beta;


    atl::Variable<T> log_srv2_sel_asc_alpha;
    atl::Variable<T> log_srv2_sel_asc_beta;
    atl::Variable<T> srv2_sel_asc_alpha;
    atl::Variable<T> srv2_sel_asc_beta;

    atl::Variable<T> log_srv2_sel_desc_alpha;
    atl::Variable<T> log_srv2_sel_desc_beta;
    atl::Variable<T> srv2_sel_desc_alpha;
    atl::Variable<T> srv2_sel_desc_beta;


    atl::Variable<T> log_srv3_sel_asc_alpha;
    atl::Variable<T> log_srv3_sel_asc_beta;
    atl::Variable<T> srv3_sel_asc_alpha;
    atl::Variable<T> srv3_sel_asc_beta;

    atl::Variable<T> log_srv3_sel_desc_alpha;
    atl::Variable<T> log_srv3_sel_desc_beta;
    atl::Variable<T> srv3_sel_desc_alpha;
    atl::Variable<T> srv3_sel_desc_beta;


    atl::Variable<T> log_srv6_sel_asc_alpha;
    atl::Variable<T> log_srv6_sel_asc_beta;
    atl::Variable<T> srv6_sel_asc_alpha;
    atl::Variable<T> srv6_sel_asc_beta;

    atl::Variable<T> log_srv6_sel_desc_alpha;
    atl::Variable<T> log_srv6_sel_desc_beta;
    atl::Variable<T> srv6_sel_desc_alpha;
    atl::Variable<T> srv6_sel_desc_beta;


    atl::VariableMatrix<T> srv_sel;


    //growth model
    atl::Variable<T> gr_Winf;
    atl::Variable<T> gr_k;
    atl::Variable<T> gr_a0;

    atl::Variable<T> log_mean_fsh_mort;
    atl::VariableVector<T> fsh_mort_devs;
    atl::VariableVector<T> fsh_mort;

    // catchability for srv 1 (EIT survey; 3 periods)
    atl::Variable<T> log_srv_1a_q;
    atl::Variable<T> srv_1a_q;

    atl::Variable<T> log_srv_1b_q;
    atl::Variable<T> srv_1b_q;

    atl::Variable<T> log_srv_1_q;
    atl::Variable<T> srv_1_q;

    // catchability for srv 2 (bottom trawl survey)
    atl::Variable<T> log_srv_2_q;
    atl::Variable<T> srv_2_q;

    // catchability for srv 3 (ADF&G survey)
    atl::Variable<T> log_srv_3_q;
    atl::Variable<T> srv_3_q;

    // catchability for srv 4 (age-1 acoustic survey)
    atl::Variable<T> log_srv_4_q;
    atl::Variable<T> srv_4_q;
    atl::Variable<T> srv_4_q_pow;

    // catchability for srv 5 (age-2 acoustic survey)
    atl::Variable<T> log_srv_5_q;
    atl::Variable<T> srv_5_q;
    atl::Variable<T> srv_5_q_pow;

    // catchability for srv 6 (summer survey)
    atl::Variable<T> log_srv_6_q;
    atl::Variable<T> srv_6_q;

    //Runtime(writable)
    atl::VariableMatrix<T> wtAA;
    atl::VariableMatrix<T> F;
    atl::VariableMatrix<T> Z;
    atl::VariableMatrix<T> expZ;
    atl::VariableMatrix<T> expZ_sp;
    atl::VariableMatrix<T> expZ_yrfrac_srv1;
    atl::VariableMatrix<T> expZ_yrfrac_srv2;
    atl::VariableMatrix<T> expZ_yrfrac_srv3;
    atl::VariableMatrix<T> expZ_yrfrac_srv6;
    atl::VariableMatrix<T> N;
    atl::VariableMatrix<T> C;

    atl::VariableVector<T> est_catch;
    atl::VariableMatrix<T> est_fsh_prop_at_age;
    atl::VariableMatrix<T> est_fsh_prop_at_len;
    atl::VariableVector<T> est_srv_1a_biomass;
    atl::VariableVector<T> est_srv_1b_biomass;
    atl::VariableVector<T> est_srv_1_biomass;
    atl::VariableVector<T> est_srv_2_biomass;
    atl::VariableVector<T> est_srv_3_biomass;
    atl::VariableVector<T> est_srv_4_biomass;
    atl::VariableVector<T> est_srv_5_biomass;
    atl::VariableVector<T> est_srv_6_biomass;
    atl::VariableMatrix<T> est_srv_1_prop_at_age;
    atl::VariableMatrix<T> est_srv_1_prop_at_len;
    atl::VariableMatrix<T> est_srv_2_prop_at_age;
    atl::VariableMatrix<T> est_srv_2_prop_at_len;
    atl::VariableMatrix<T> est_srv_3_prop_at_age;
    atl::VariableMatrix<T> est_srv_3_prop_at_len;
    atl::VariableMatrix<T> est_srv_6_prop_at_age;
    atl::VariableMatrix<T> est_srv_6_prop_at_len;
    atl::VariableVector<T> est_total_biomass;
    atl::VariableVector<T> est_summary_biomass;
    atl::VariableVector<T> est_spawn_biomass;

    atl::VariableMatrix<T> N_proj;
    atl::VariableMatrix<T> F_proj;
    atl::VariableMatrix<T> Z_proj;
    atl::VariableMatrix<T> C_proj;
    atl::VariableVector<T> est_catch_proj;
    atl::VariableVector<T> est_srv_1_biomass_proj;

    atl::VariableVector<T> nll_parts;

public:

    CatchAtAge() { }

    void RegisterParameterVector(atl::VariableVector<T>& p_vec, std::string base_param_name, const int phase = 1)
    {
        p_vec.SetName(base_param_name);

        for (int i = 0; i < p_vec.GetSize(); i++)
        {
            this->RegisterParameter(p_vec(i), phase);
        }
    }

    void RegisterParameterDevVector(atl::VariableVector<T>& p_vec, std::string base_param_name, const int phase = 1)
    {
        p_vec.SetName(base_param_name);

        for (int i = 0; i < p_vec.GetSize(); i++)
        {
            this->RegisterParameter(p_vec(i), phase);
        }
    }

    void PrepareDevVector(atl::VariableVector<T>& v)
    {
        atl::Variable<T> avg = atl::Average(v);

        for ( int i = 0; i < v.GetSize(); ++i )
        {
            v(i) -= avg;
        }
    }

    void RegisterRandomVariableVector(atl::VariableVector<T>& p_vec, std::string base_param_name, const int phase = 1)
    {
        p_vec.SetName(base_param_name);

        for (int i = 0; i < p_vec.GetSize(); i++)
        {
            this->RegisterRandomVariable(p_vec(i), phase);
        }
    }

    void AdjustInputData()
    {
        // match the 2015 assessment with adjusting the age comp data
        // this function should run only once

        // accumulate younger fish comp data
        // accumulate older fish comp data

        // adjustment to fsh age comps data
        for ( int i = 0; i < nyrs_fsh_prop_at_age; i++ )
        {
            if ( age_young_fsh > 0 )
            {
                for ( int j = 0; j < age_young_fsh; j++ )
                {
                    obs_fsh_prop_at_age(i,age_young_fsh) += obs_fsh_prop_at_age(i,j);
                    obs_fsh_prop_at_age(i,j) = T(0);
                }
            }

            if ( (nages-1) > age_old_fsh )
            {
                for ( int j = (age_old_fsh+1); j < nages; j++ )
                {
                    obs_fsh_prop_at_age(i,age_old_fsh) += obs_fsh_prop_at_age(i,j);
                    obs_fsh_prop_at_age(i,j) = T(0);
                }
            }
        }

        // adjustment to srv1 age comps data
        for ( int i = 0; i < nyrs_srv1_prop_at_age; i++ )
        {
            if ( age_young_srv1 > 0 )
            {
                for ( int j = 0; j < age_young_srv1; j++ )
                {
                    obs_srv_1_prop_at_age(i,age_young_srv1) += obs_srv_1_prop_at_age(i,j);
                    obs_srv_1_prop_at_age(i,j) = T(0);
                }
            }

            if ( (nages-1) > age_old_srv1 )
            {
                for ( int j = (age_old_srv1+1); j < nages; j++ )
                {
                    obs_srv_1_prop_at_age(i,age_old_srv1) += obs_srv_1_prop_at_age(i,j);
                    obs_srv_1_prop_at_age(i,j) = T(0);
                }
            }
        }

        // adjustment to srv2 age comps data
       for ( int i = 0; i < nyrs_srv2_prop_at_age; i++ )
        {
            if ( age_young_srv2 > 0 )
            {
                for ( int j = 0; j < age_young_srv2; j++ )
                {
                    obs_srv_2_prop_at_age(i,age_young_srv2) += obs_srv_2_prop_at_age(i,j);
                    obs_srv_2_prop_at_age(i,j) = T(0);
                }
            }

            if ( (nages-1) > age_old_srv2 )
            {
                for ( int j = (age_old_srv2+1); j < nages; j++ )
                {
                    obs_srv_2_prop_at_age(i,age_old_srv2) += obs_srv_2_prop_at_age(i,j);
                    obs_srv_2_prop_at_age(i,j) = T(0);
                }
            }
        }

        // adjustment to srv6 age comps data
       for ( int i = 0; i < nyrs_srv6_prop_at_age; i++ )
        {
            if ( age_young_srv6 > 0 )
            {
                for ( int j = 0; j < age_young_srv6; j++ )
                {
                    obs_srv_6_prop_at_age(i,age_young_srv6) += obs_srv_6_prop_at_age(i,j);
                    obs_srv_6_prop_at_age(i,j) = T(0);
                }
            }

            if ( (nages-1) > age_old_srv6 )
            {
                for ( int j = (age_old_srv6+1); j < nages; j++ )
                {
                    obs_srv_6_prop_at_age(i,age_old_srv6) += obs_srv_6_prop_at_age(i,j);
                    obs_srv_6_prop_at_age(i,j) = T(0);
                }
            }
       }
    }

    void Initialize()
    {
        srv_sel.Resize(nyrs, nages);
        wtAA.Resize(nyrs, nages);
        F.Resize(nyrs, nages);
        Z.Resize(nyrs, nages);
        expZ.Resize(nyrs, nages);
        expZ_sp.Resize(nyrs, nages);
        expZ_yrfrac_srv1.Resize(nyrs, nages);
        expZ_yrfrac_srv2.Resize(nyrs, nages);
        expZ_yrfrac_srv3.Resize(nyrs, nages);
        expZ_yrfrac_srv6.Resize(nyrs, nages);
        N.Resize((nyrs + 1), nages);
        C.Resize(nyrs, nages);
        fsh_sel.Resize(nyrs, nages);
        srv_sel.Resize(nsrvs, nages);
        est_catch.Resize(nyrs);
        est_fsh_prop_at_age.Resize(nyrs, nages);
        est_fsh_prop_at_len.Resize(nyrs, n_fsh_len_bins);
        est_srv_1a_biomass.Resize(nyrs_srv1a);
        est_srv_1b_biomass.Resize(nyrs_srv1b);
        est_srv_1_biomass.Resize(nyrs_srv1);
        est_srv_2_biomass.Resize(nyrs_srv2);
        est_srv_3_biomass.Resize(nyrs_srv3);
        est_srv_4_biomass.Resize(nyrs_srv4);
        est_srv_5_biomass.Resize(nyrs_srv5);
        est_srv_6_biomass.Resize(nyrs_srv6);
        est_srv_1_prop_at_age.Resize(nyrs_srv1_prop_at_age, nages);
        est_srv_1_prop_at_len.Resize(nyrs_srv1_prop_at_len, n_srv_len_bins);
        est_srv_2_prop_at_age.Resize(nyrs_srv2_prop_at_age, nages);
        est_srv_2_prop_at_len.Resize(nyrs_srv2_prop_at_len, n_srv_len_bins);
        est_srv_3_prop_at_age.Resize(nyrs_srv3_prop_at_age, nages);
        est_srv_3_prop_at_len.Resize(nyrs_srv3_prop_at_len, n_srv_len_bins);
        est_srv_6_prop_at_age.Resize(nyrs_srv6_prop_at_age, nages);
        est_srv_6_prop_at_len.Resize(nyrs_srv6_prop_at_len, n_srv_len_bins);
        est_total_biomass.Resize(nyrs);
        est_summary_biomass.Resize(nyrs);
        est_spawn_biomass.Resize(nyrs);

        N_proj.Resize(nyrs_proj, nages);
        F_proj.Resize(nyrs_proj, nages);
        Z_proj.Resize(nyrs_proj, nages);
        C_proj.Resize(nyrs_proj, nages);


        nll_parts.Resize(25);


        log_fsh_sel_asc_alpha.SetName(std::string("log_fsh_sel_asc_alpha"));
        log_fsh_sel_asc_beta.SetName(std::string("log_fsh_sel_asc_beta"));
        log_fsh_sel_desc_alpha.SetName(std::string("log_fsh_sel_desc_alpha"));
        log_fsh_sel_desc_beta.SetName(std::string("log_fsh_sel_desc_beta"));

        log_fsh_sel_asc_alpha.SetBounds(0.0, 2.0);
        log_fsh_sel_asc_beta.SetBounds(-5.0, 5.0);
        log_fsh_sel_desc_alpha.SetBounds(1.0, 3.0);
        log_fsh_sel_desc_beta.SetBounds(-5.0, 5.0);

        log_fsh_sel_asc_alpha  = atl::Variable<T>(1.3863);
        log_fsh_sel_asc_beta   = atl::Variable<T>(1.0);
        log_fsh_sel_desc_alpha = atl::Variable<T>(2.0794);
        log_fsh_sel_desc_beta  = atl::Variable<T>(1.0);

        this->RegisterParameter(log_fsh_sel_asc_alpha, 4);
        this->RegisterParameter(log_fsh_sel_asc_beta, 4);
        this->RegisterParameter(log_fsh_sel_desc_alpha, 4);
        this->RegisterParameter(log_fsh_sel_desc_beta, 4);


        // this->Register(log_srv1_sel_asc_alpha, 7, "log_srv1_sel_asc_alpha");
        // this->Register(log_srv1_sel_asc_beta, 7, "log_srv1_sel_asc_beta");
        // log_srv1_sel_asc_alpha.SetBounds(-1.0, 5.0);
        // log_srv1_sel_asc_beta.SetBounds(-5.0, 5.0);
        log_srv1_sel_asc_alpha.SetName(std::string("log_srv1_sel_asc_alpha"));
        log_srv1_sel_asc_beta.SetName(std::string("log_srv1_sel_asc_beta"));
        log_srv1_sel_asc_alpha = atl::Variable<T>(0.0);
        log_srv1_sel_asc_beta  = atl::Variable<T>(4.0);

        log_srv1_sel_desc_alpha.SetName(std::string("log_srv1_sel_desc_alpha"));
        log_srv1_sel_desc_beta.SetName(std::string("log_srv1_sel_desc_beta"));
        log_srv1_sel_desc_alpha.SetBounds(1.0, 3.0);
        log_srv1_sel_desc_beta.SetBounds(-5.0, 5.0);
        log_srv1_sel_desc_alpha = atl::Variable<T>(1.6094);
        log_srv1_sel_desc_beta  = atl::Variable<T>(1.0);
        this->RegisterParameter(log_srv1_sel_desc_alpha, 6);
        this->RegisterParameter(log_srv1_sel_desc_beta, 6);


        log_srv2_sel_asc_alpha.SetName(std::string("log_srv2_sel_asc_alpha"));
        log_srv2_sel_asc_beta.SetName(std::string("log_srv2_sel_asc_beta"));
        log_srv2_sel_asc_alpha.SetBounds(0.0, 4.0);
        log_srv2_sel_asc_beta.SetBounds(-5.0, 5.0);
        log_srv2_sel_asc_alpha = atl::Variable<T>(1.3863);
        log_srv2_sel_asc_beta  = atl::Variable<T>(-0.8);
        this->RegisterParameter(log_srv2_sel_asc_alpha, 6);
        this->RegisterParameter(log_srv2_sel_asc_beta, 6);

        // this->RegisterParameter(log_srv2_sel_desc_alpha, 8);
        // this->RegisterParameter(log_srv2_sel_desc_beta, 8);
        // log_srv2_sel_desc_alpha.SetBounds(1.5, 3.5);
        // log_srv2_sel_desc_beta.SetBounds(-5.0, 5.0);
        log_srv2_sel_desc_alpha.SetName(std::string("log_srv2_sel_desc_alpha"));
        log_srv2_sel_desc_beta.SetName(std::string("log_srv2_sel_desc_beta"));
        log_srv2_sel_desc_alpha = atl::Variable<T>(2.9957);
        log_srv2_sel_desc_beta  = atl::Variable<T>(1.0);


        log_srv3_sel_asc_alpha.SetName(std::string("log_srv3_sel_asc_alpha"));
        log_srv3_sel_asc_beta.SetName(std::string("log_srv3_sel_asc_beta"));
        log_srv3_sel_asc_alpha.SetBounds(0.0, 3.0);
        log_srv3_sel_asc_beta.SetBounds(-5.0, 5.0);
        log_srv3_sel_asc_alpha = atl::Variable<T>(1.6094);
        log_srv3_sel_asc_beta  = atl::Variable<T>(0.0);
        this->RegisterParameter(log_srv3_sel_asc_alpha, 8);
        this->RegisterParameter(log_srv3_sel_asc_beta, 8);

        // this->Register(log_srv3_sel_desc_alpha, 9, "log_srv3_sel_desc_alpha");
        // this->Register(log_srv3_sel_desc_beta, 9, "log_srv3_sel_desc_beta");
        // log_srv3_sel_desc_alpha.SetBounds(1.0, 5.0);
        // log_srv3_sel_desc_beta.SetBounds(-5.0, 5.0);
        log_srv3_sel_desc_alpha.SetName(std::string("log_srv3_sel_desc_alpha"));
        log_srv3_sel_desc_beta.SetName(std::string("log_srv3_sel_desc_beta"));
        log_srv3_sel_desc_alpha = atl::Variable<T>(0.0);
        log_srv3_sel_desc_beta  = atl::Variable<T>(-20.0);


        // this->RegisterParameter(log_srv6_sel_asc_alpha, 8);
        // this->RegisterParameter(log_srv6_sel_asc_beta, 8);
        // log_srv6_sel_asc_alpha.SetBounds(0.0, 5.0);
        // log_srv6_sel_asc_beta.SetBounds(-5.0, 5.0);
        log_srv6_sel_asc_alpha.SetName(std::string("log_srv6_sel_asc_alpha"));
        log_srv6_sel_asc_beta.SetName(std::string("log_srv6_sel_asc_beta"));
        log_srv6_sel_asc_alpha = atl::Variable<T>(-0.6931);
        log_srv6_sel_asc_beta  = atl::Variable<T>(4.9);

        // this->RegisterParameter(log_srv6_sel_desc_alpha, 8);
        // this->RegisterParameter(log_srv6_sel_desc_beta, 8);
        // log_srv6_sel_desc_alpha.SetBounds(1.0, 5.0);
        // log_srv6_sel_desc_beta.SetBounds(-5.0, 5.0);
        log_srv6_sel_desc_alpha.SetName(std::string("log_srv6_sel_desc_alpha"));
        log_srv6_sel_desc_beta.SetName(std::string("log_srv6_sel_desc_beta"));
        log_srv6_sel_desc_alpha = atl::Variable<T>(2.9957);
        log_srv6_sel_desc_beta  = atl::Variable<T>(1.0);


        // this->RegisterParameter(log_srv_1a_q,5);
        // log_srv_1a_q.SetBounds(-10.0,10.0);
        log_srv_1a_q.SetName(std::string("log_srv_1a_q"));
        log_srv_1a_q.SetBounds(-10.0, 10.0);
        log_srv_1a_q = atl::Variable<T>(0.0);
        this->RegisterParameter(log_srv_1a_q, 5);

        log_srv_1b_q.SetName(std::string("log_srv_1b_q"));
        log_srv_1b_q.SetBounds(-10.0, 10.0);
        log_srv_1b_q = atl::Variable<T>(-0.1);
        this->RegisterParameter(log_srv_1b_q, 5);

        log_srv_1_q.SetName(std::string("log_srv_1_q"));
        log_srv_1_q.SetBounds(-10.0, 10.0);
        log_srv_1_q = atl::Variable<T>(-0.1);
        // this->RegisterParameter(log_srv_1_q, 5);

        log_srv_2_q.SetName(std::string("log_srv_2_q"));
        log_srv_2_q.SetBounds(-10.0, 10.0);
        log_srv_2_q = atl::Variable<T>(0.0);
        this->RegisterParameter(log_srv_2_q, 5);

        log_srv_3_q.SetName(std::string("log_srv_3_q"));
        log_srv_3_q.SetBounds(-10.0, 10.0);
        log_srv_3_q = atl::Variable<T>(-1.6);
        this->RegisterParameter(log_srv_3_q, 6);

        log_srv_4_q.SetName(std::string("log_srv_4_q"));
        log_srv_4_q.SetBounds(-10.0, 10.0);
        log_srv_4_q = atl::Variable<T>(0.0);
        this->RegisterParameter(log_srv_4_q, 6);

        srv_4_q_pow.SetName(std::string("srv_4_q_pow"));
        srv_4_q_pow.SetBounds(-10.0, 10.0);
        srv_4_q_pow = atl::Variable<T>(1.0);
        this->RegisterParameter(srv_4_q_pow, 6);

        log_srv_5_q.SetName(std::string("log_srv_5_q"));
        log_srv_5_q.SetBounds(-10.0, 10.0);
        log_srv_5_q = atl::Variable<T>(0.0);
        this->RegisterParameter(log_srv_5_q, 6);

        // this->RegisterParameter(srv_5_q_pow, 7);
        // srv_5_q_pow.SetBounds(-10.0, 10.0);
        srv_5_q_pow.SetName(std::string("srv_5_q_pow"));
        srv_5_q_pow = atl::Variable<T>(0.0);

        log_srv_6_q.SetName(std::string("log_srv_6_q"));
        log_srv_6_q.SetBounds(-10.0, 10.0);
        log_srv_6_q = atl::Variable<T>(0.0);
        this->RegisterParameter(log_srv_6_q, 5);


        log_mean_recruits.SetName(std::string("log_mean_recruits"));
        log_mean_recruits.SetBounds(5.0, 36.0);
        log_mean_recruits = atl::Variable<T>(20.7232658369);
        this->RegisterParameter(log_mean_recruits, 1);


        log_mean_fsh_mort.SetName(std::string("log_mean_fsh_mort"));
        log_mean_fsh_mort.SetBounds(-10.0, 10.0);
        log_mean_fsh_mort = atl::Variable<T>(-1.6);
        this->RegisterParameter(log_mean_fsh_mort, 1);


        init_pop_devs.Resize(nages - 1);
        initial_population.Resize(nages);

        recruit_devs.Resize(nyrs);
        recruits.Resize(nyrs + 1);
        recruit_proj_devs.Resize(nyrs_proj);
        recruit_proj.Resize(nyrs_proj);

        fsh_mort_devs.Resize(nyrs);
        fsh_mort.Resize(nyrs);

        fsh_sel_asc_alpha_devs.Resize(nyrs);
        fsh_sel_asc_beta_devs.Resize(nyrs);
        fsh_sel_desc_alpha_devs.Resize(nyrs);
        fsh_sel_desc_beta_devs.Resize(nyrs);

        // this->RegisterParameter(init_pop_devs, 4);
        // init_pop_devs.SetBounds(-15.0, 15.0);
        init_pop_devs = T(0.0);
        // this->RegisterParameterDevVector(init_pop_devs, "init_pop_devs", 4);

        // this->RegisterParameter(recruit_devs, 3);
        recruit_devs.SetBounds(-15.0, 15.0);
        recruit_devs = T(0.0);
        this->RegisterParameterDevVector(recruit_devs, std::string("recruit_devs"), 3);

        // recruit_proj_devs.SetBounds(-5.0, 5.0);
        recruit_proj_devs = T(0.0);
        // this->RegisterParameterDevVector(recruit_proj_devs, std::string("recruit_proj_devs"), 9);

        // this->RegisterParameter(fsh_mort_devs, 2);
        fsh_mort_devs.SetBounds(-10.0, 10.0);
        fsh_mort_devs = T(0.0);
        this->RegisterParameterDevVector(fsh_mort_devs, std::string("fsh_mort_devs"), 2);

        // this->RegisterParameter(fsh_sel_asc_alpha_devs, 5);
        fsh_sel_asc_alpha_devs.SetBounds(-5.0, 5.0);
        fsh_sel_asc_alpha_devs = T(0.0);
        this->RegisterParameterDevVector(fsh_sel_asc_alpha_devs, std::string("fsh_sel_asc_alpha_devs"), 7);

        // this->RegisterParameter(fsh_sel_asc_beta_devs, 5);
        fsh_sel_asc_beta_devs.SetBounds(-5.0, 5.0);
        fsh_sel_asc_beta_devs = T(0.0);
        this->RegisterParameterDevVector(fsh_sel_asc_beta_devs, std::string("fsh_sel_asc_beta_devs"), 7);

        // this->RegisterParameter(fsh_sel_desc_alpha_devs, 5);
        // fsh_sel_desc_alpha_devs.SetBounds(-5.0, 5.0);
        fsh_sel_desc_alpha_devs = T(0.0);
        // this->RegisterParameterDevVector(fsh_sel_desc_alpha_devs, "fsh_sel_desc_alpha_devs", 7);

        // this->RegisterParameter(fsh_sel_desc_beta_devs, 5);
        // fsh_sel_desc_beta_devs.SetBounds(-5.0, 5.0);
        fsh_sel_desc_beta_devs = T(0.0);
        // this->RegisterParameterDevVector(fsh_sel_desc_beta_devs, "fsh_sel_desc_beta_devs", 7);


        AdjustInputData();
    }

    void Selectivity()
    {
        atl::Variable<T> max_sel;
        atl::VariableVector<T> sel_row;

        sel_row.Resize(nages);

        fsh_sel_asc_alpha  = atl::exp(log_fsh_sel_asc_alpha);
        fsh_sel_asc_beta   = atl::exp(log_fsh_sel_asc_beta);
        fsh_sel_desc_alpha = atl::exp(log_fsh_sel_desc_alpha);
        fsh_sel_desc_beta  = atl::exp(log_fsh_sel_desc_beta);

        for ( int i = 0; i < nyrs; i++ )
        {
            for ( int j = 0; j < nages; j++ )
            {
                fsh_sel(i, j) = (1.0 / (1.0 + atl::exp(-1.0 * (fsh_sel_asc_beta * atl::exp(fsh_sel_asc_beta_devs(i))) * (T(ages[j]) - (fsh_sel_asc_alpha + fsh_sel_asc_alpha_devs(i)))))) * (1.0 - (1.0 / (1.0 + atl::exp(-1.0 * (fsh_sel_desc_beta * atl::exp(fsh_sel_desc_beta_devs(i))) * (T(ages[j]) - (fsh_sel_desc_alpha + fsh_sel_desc_alpha_devs(i)))))));
            }

            // max_sel = atl::Max<atl::Variable<T> >(atl::VariableMatrixRow<T>(fsh_sel, i));

            // if ( max_sel > T(0) )
            // {
            //     fsh_sel(i) /= max_sel;
            // }

            // replace max - matches assessment model
            // fsh_sel(i) /= fsh_sel(i, 6);

            // does VariableMatrix(i) - Variable divide not work correctly?
            for ( int j = 0; j < nages; j++ )
            {
                fsh_sel(i, j) /= fsh_sel(i, 6);
            }
        }

        srv_sel = T(0.0);

        srv1_sel_asc_alpha  = atl::exp(log_srv1_sel_asc_alpha);
        srv1_sel_asc_beta   = atl::exp(log_srv1_sel_asc_beta);
        srv1_sel_desc_alpha = atl::exp(log_srv1_sel_desc_alpha);
        srv1_sel_desc_beta  = atl::exp(log_srv1_sel_desc_beta);

        srv2_sel_asc_alpha  = atl::exp(log_srv2_sel_asc_alpha);
        srv2_sel_asc_beta   = atl::exp(log_srv2_sel_asc_beta);
        srv2_sel_desc_alpha = atl::exp(log_srv2_sel_desc_alpha);
        srv2_sel_desc_beta  = atl::exp(log_srv2_sel_desc_beta);

        srv3_sel_asc_alpha  = atl::exp(log_srv3_sel_asc_alpha);
        srv3_sel_asc_beta   = atl::exp(log_srv3_sel_asc_beta);
        srv3_sel_desc_alpha = atl::exp(log_srv3_sel_desc_alpha);
        srv3_sel_desc_beta  = atl::exp(log_srv3_sel_desc_beta);

        srv6_sel_asc_alpha  = atl::exp(log_srv6_sel_asc_alpha);
        srv6_sel_asc_beta   = atl::exp(log_srv6_sel_asc_beta);
        srv6_sel_desc_alpha = atl::exp(log_srv6_sel_desc_alpha);
        srv6_sel_desc_beta  = atl::exp(log_srv6_sel_desc_beta);

        for ( int j = 0; j < nages ; j++ )
        {
            // srv 1
            srv_sel(0, j) = (1.0 / (1.0 + atl::exp(-1.0 * srv1_sel_asc_beta * (T(ages[j]) - srv1_sel_asc_alpha)))) * (1.0 - (1.0 / (1.0 + atl::exp(-1.0 * srv1_sel_desc_beta * (T(ages[j]) - srv1_sel_desc_alpha)))));

            // srv 2
            srv_sel(1, j) = (1.0 / (1.0 + atl::exp(-1.0 * srv2_sel_asc_beta * (T(ages[j]) - srv2_sel_asc_alpha)))) * (1.0 - (1.0 / (1.0 + atl::exp(-1.0 * srv2_sel_desc_beta * (T(ages[j]) - srv2_sel_desc_alpha)))));

            // srv 3
            srv_sel(2, j) = (1.0 / (1.0 + atl::exp(-1.0 * srv3_sel_asc_beta * (T(ages[j]) - srv3_sel_asc_alpha)))) * (1.0 - (1.0 / (1.0 + atl::exp(-1.0 * srv3_sel_desc_beta * (T(ages[j]) - srv3_sel_desc_alpha)))));

            // srv 6
            srv_sel(5, j) = (1.0 / (1.0 + atl::exp(-1.0 * srv6_sel_asc_beta * (T(ages[j]) - srv6_sel_asc_alpha)))) * (1.0 - (1.0 / (1.0 + atl::exp(-1.0 * srv6_sel_desc_beta * (T(ages[j]) - srv6_sel_desc_alpha)))));
        }

        // zero out sel for ages 1 and 2 for srv 1
        srv_sel(0, 0) = T(0.0);
        srv_sel(0, 1) = T(0.0);

        // separate sel for age 1 for srv 2
        // srv_sel(1,0) = srv2_sel_age1;

        // set sel to 1 for age 1 in srv 4 and age 2 in srv 5
        srv_sel(3, 0) = T(1.0);
        srv_sel(4, 1) = T(1.0);

        // for ( int k = 0; k < nsrvs; k++ )
        // {
        //     max_sel = atl::Max<atl::Variable<T> >(atl::VariableMatrixRow<T>(srv_sel, k));

        //     if ( max_sel > T(0) )
        //     {
        //         srv_sel(k) /= max_sel;
        //     }
        // }

        // replace max - matches assessment model
        // srv_sel(0) /= srv_sel(0, 2);
        // srv_sel(1) /= srv_sel(1, 9);
        // srv_sel(2) /= srv_sel(2, 9);
        // srv_sel(5) /= srv_sel(5, 0);

        // does VariableMatrix(i) - Variable divide not work correctly?
        for ( int j = 0; j < nages ; j++ )
        {
            srv_sel(0, j) /= srv_sel(0, 2);
            srv_sel(1, j) /= srv_sel(1, 9);
            srv_sel(2, j) /= srv_sel(2, 9);
            srv_sel(5, j) /= srv_sel(5, 0);
        }
    }

    void Growth()
    {
        for ( int j = 0; j < nages ; j++ )
        {
            wtAA(0, j) = gr_Winf * (1.0 - atl::exp(-gr_k * (T(ages[j]) - gr_a0)));
        }

        for ( int i = 1; i < nyrs; i++ )
        {
            for ( int j = 0; j < nages; j++ )
            {
                wtAA(i, j) = wtAA(0, j);
            }
        }
    }

    void Mortality()
    {
        for (int i = 0; i < nyrs; i++)
        {
            fsh_mort(i) = atl::exp(log_mean_fsh_mort + fsh_mort_devs(i));

            for (int j = 0; j < nages; j++)
            {
                F(i, j) = fsh_mort(i) * fsh_sel(i, j);
                Z(i, j) = F(i, j) + M[j];
            }
        }
    }

    void Survivability()
    {
        for ( int i = 0; i < nyrs; i++ )
        {
            for ( int j = 0; j < nages; j++ )
            {
                expZ(i, j)    = atl::exp(-1.0 * Z(i, j));

                expZ_sp(i, j) = atl::exp(-1.0 * yrfrac_sp * Z(i, j));

                expZ_yrfrac_srv1(i, j) = atl::exp(-1.0 * yrfrac_srv_1[i] * Z(i, j));
                expZ_yrfrac_srv2(i, j) = atl::exp(-1.0 * yrfrac_srv_2[i] * Z(i, j));
                expZ_yrfrac_srv3(i, j) = atl::exp(-1.0 * yrfrac_srv_3[i] * Z(i, j));
                expZ_yrfrac_srv6(i, j) = atl::exp(-1.0 * yrfrac_srv_6[i] * Z(i, j));
            }
        }
    }

    void NumbersAtAge()
    {
        atl::Variable<T> age_specific_biomass;

        initial_population(0) = atl::exp(log_mean_recruits);
        initial_population(1) = initial_population(0) * atl::exp(recruit_devs(0) - M[0]);
        for ( int j = 2; j < nages; j++ )
        {
            initial_population(j) = initial_population(j - 1) * atl::exp(atl::Variable<T>(-1.0 * M[j - 1]));
        }
        initial_population(nages - 1) /= (1.0 - atl::exp(atl::Variable<T>(-1.0 * M[nages - 1])));

        for ( int j = 1; j < nages; j++ )
        {
            initial_population(j) *= atl::exp(init_pop_devs(j - 1));
        }

        // std::cout << "init pop " << initial_population << std::endl;

        N.RowFill(0, initial_population);

        // could put a S-R relationship here
        // N(0, 0) = something;

        // std::cout << "first year N-at-age " << atl::VariableMatrixRow<T>(N, 0) << std::endl;

        for ( int i = 0; i < nyrs; i++ )
        {
            N(i, 0) *= atl::exp(recruit_devs(i));

            // this assumes continuous fishing
            for ( int j = 1; j < nages; j++ )
            {
                N(i + 1, j) = N(i, j - 1) * expZ(i, j - 1);
            }
            N(i + 1, (nages - 1)) += (N(i, (nages - 1)) * expZ(i, (nages - 1)));

            N(i + 1, 0) = atl::exp(log_mean_recruits);

            // std::cout << "N-at-age in year " << i << " " << atl::VariableMatrixRow<T>(N, i) << std::endl;

            // calculate total and spawning biomass - vector operations
            est_total_biomass(i)   = T(0);
            est_summary_biomass(i) = T(0);
            est_spawn_biomass(i)   = T(0);
            auto n_at_age_row = N.Row(i);

             for ( int j = 0; j < nages; j++ )
            {
                age_specific_biomass = n_at_age_row(j) * wt_pop(i, j);

                est_total_biomass(i) += age_specific_biomass;

                // summary biomass is age 3+
                if ( j >= 2 ) est_summary_biomass(i) += age_specific_biomass;

                est_spawn_biomass(i) += (n_at_age_row(j) * expZ_sp(i, j) * wt_spawn(i, j) * 0.5 * maturity[j]);
            }
            est_total_biomass(i)   /= 1000.0;
            est_summary_biomass(i) /= 1000.0;
            est_spawn_biomass(i)   /= 1000.0;
        }

        // convert from kg to mt
        // est_total_biomass /= 1000.0;
        // est_spawn_biomass /= 1000.0;

        // recruits = atl::VariableMatrixColumn<T>(N,0);
        for ( int i = 0; i < recruits.GetSize(); ++i )
        {
            recruits(i) = N.Column(0)(i);
        }
    }

    void FleetIndices()
    {
        atl::Variable<T> est_srv_num;
        int y;

        srv_1a_q = atl::exp(log_srv_1a_q);
        srv_1b_q = atl::exp(log_srv_1b_q);
        srv_1_q  = atl::exp(log_srv_1_q);
        srv_2_q  = atl::exp(log_srv_2_q);
        srv_3_q  = atl::exp(log_srv_3_q);
        srv_4_q  = atl::exp(log_srv_4_q);
        srv_5_q  = atl::exp(log_srv_5_q);
        srv_6_q  = atl::exp(log_srv_6_q);

        // srv 1
        auto srv_sel_1 = srv_sel.Row(0);

        for ( int i = 0; i < nyrs_srv1a; i++ )
        {
            y = yrs_srv1a[i];

            est_srv_1a_biomass(i) = srv_1a_q * atl::Sum(atl::VariableMatrix<T>((srv_sel_1 * N.Row(y) * expZ_yrfrac_srv1.Row(y)) * obs_srv_1_wt_at_age.Row(y))) / 1000.0;
        }

        for ( int i = 0; i < nyrs_srv1b; i++ )
        {
            y = yrs_srv1b[i];

            est_srv_1b_biomass(i) = srv_1b_q * atl::Sum(atl::VariableMatrix<T>((srv_sel_1 * N.Row(y) * expZ_yrfrac_srv1.Row(y)) * obs_srv_1_wt_at_age.Row(y))) / 1000.0;
        }

        for ( int i = 0; i < nyrs_srv1; i++ )
        {
            y = yrs_srv1[i];

            est_srv_1_biomass(i) = srv_1_q * atl::Sum(atl::VariableMatrix<T>((srv_sel_1 * N.Row(y) * expZ_yrfrac_srv1.Row(y)) * obs_srv_1_wt_at_age.Row(y))) / 1000.0;
        }

        // calculate proportions at age
        for ( int i = 0; i < nyrs_srv1_prop_at_age; i++ )
        {
            y = yrs_srv1_prop_at_age[i];

            // est_srv_1_prop_at_age(i) = atl::VariableVector<T>(age_age_err * (srv_sel(0) * N(y) * expZ_yrfrac_srv1(y)));
            auto n_at_age_row = N.Row(y) * expZ_yrfrac_srv1.Row(y);
            for ( int j = 0; j < nages; j++ )
            {
                est_srv_1_prop_at_age(i, j) = atl::Sum(atl::VariableMatrix<T>(srv_sel_1 * n_at_age_row * age_age_err.Column(j)));
            }

            est_srv_num = atl::Sum(atl::VariableMatrix<T>(est_srv_1_prop_at_age.Row(i)));
            if ( est_srv_num > T(0.0) )
            {
                // est_srv_1_prop_at_age(i) /= est_srv_num;

                for ( int j = 0; j < nages; ++j )
                {
                    est_srv_1_prop_at_age(i, j) /= est_srv_num;
                }
            }

            // accumulations
            if ( age_young_srv1 > 0 )
            {
                for ( int j = 0; j < age_young_srv1; j++ )
                {
                    est_srv_1_prop_at_age(i, age_young_srv1) += est_srv_1_prop_at_age(i, j);
                    est_srv_1_prop_at_age(i, j) = T(0);
                }
            }

            if ( (nages - 1) > age_old_srv1 )
            {
                for ( int j = (age_old_srv1 + 1); j < nages; j++ )
                {
                    est_srv_1_prop_at_age(i, age_old_srv1) += est_srv_1_prop_at_age(i, j);
                    est_srv_1_prop_at_age(i, j) = T(0);
                }
            }
        }

        atl::VariableMatrix<T> temp_mat_3 = RealMatrixMult(age_age_err,  age_len_trans_3);
        // calculate proportions at length
        for ( int i = 0; i < nyrs_srv1_prop_at_len; i++ )
        {
            y = yrs_srv1_prop_at_len[i];

            // est_srv_1_prop_at_len(i) = atl::VariableVector<T>((srv_sel_1 * atl::VariableMatrixRow<T>(N, y) * atl::VariableMatrixRow<T>(expZ_yrfrac_srv1, y)) * temp_mat_3);
            auto n_at_age_row = N.Row(y) * expZ_yrfrac_srv1.Row(y);
            for ( int j = 0; j < n_srv_len_bins; j++ )
            {
                est_srv_1_prop_at_len(i, j) = atl::Sum(atl::VariableMatrix<T>(srv_sel_1 * n_at_age_row * temp_mat_3.Column(j)));
            }

            est_srv_num = atl::Sum(atl::VariableMatrix<T>(est_srv_1_prop_at_len.Row(i)));
            if ( est_srv_num > T(0.0) )
            {
                // est_srv_1_prop_at_len(i) /= est_srv_num;

                for ( int j = 0; j < n_srv_len_bins; ++j )
                {
                    est_srv_1_prop_at_len(i, j) /= est_srv_num;
                }
            }
        }


        // srv 2
        auto srv_sel_2 = srv_sel.Row(1);

        for ( int i = 0; i < nyrs_srv2; i++ )
        {
            y = yrs_srv2[i];

            // est_srv_2_biomass(i) = 0;

            est_srv_2_biomass(i) = srv_2_q * atl::Sum(atl::VariableMatrix<T>((srv_sel_2 * N.Row(y) * expZ_yrfrac_srv2.Row(y)) * obs_srv_2_wt_at_age.Row(y))) / 1000.0;

            // convert from kg to mt
            // est_srv_2_biomass(i) /= T(1000.0);
        }

        // calculate proportions at age
        for ( int i = 0; i < nyrs_srv2_prop_at_age; i++ )
        {
            y = yrs_srv2_prop_at_age[i];

            // est_srv_2_prop_at_age(i) = atl::VariableMatrixRow<T>(srv_sel, 1) * atl::VariableMatrixRow<T>(N, y) * atl::VariableMatrixRow<T>(expZ_yrfrac_srv2, y);
            auto n_at_age_row = N.Row(y) * expZ_yrfrac_srv2.Row(y);
            for ( int j = 0; j < nages; j++ )
            {
                est_srv_2_prop_at_age(i, j) = atl::Sum(atl::VariableMatrix<T>(srv_sel_2 * n_at_age_row * age_age_err.Column(j)));
            }

            est_srv_num = atl::Sum(atl::VariableMatrix<T>(est_srv_2_prop_at_age.Row(i)));
            if ( est_srv_num > T(0.0) )
            {
                // est_srv_2_prop_at_age(i) /= est_srv_num;

                for ( int j = 0; j < nages; j++ )
                {
                    est_srv_2_prop_at_age(i, j) /= est_srv_num;
                }
            }

            // accumulations
            if ( age_young_srv2 > 0 )
            {
                for ( int j = 0; j < age_young_srv2; j++ )
                {
                    est_srv_2_prop_at_age(i, age_young_srv2) += est_srv_2_prop_at_age(i, j);
                    est_srv_2_prop_at_age(i, j) = T(0);
                }
            }

            if ( (nages - 1) > age_old_srv2 )
            {
                for ( int j = (age_old_srv2 + 1); j < nages; j++ )
                {
                    est_srv_2_prop_at_age(i, age_old_srv2) += est_srv_2_prop_at_age(i, j);
                    est_srv_2_prop_at_age(i, j) = T(0);
                }
            }
        }

        atl::VariableMatrix<T> temp_mat_2 = RealMatrixMult(age_age_err, age_len_trans_2);
        // calculate proportions at length
        for ( int i = 0; i < nyrs_srv2_prop_at_len; i++ )
        {
            y = yrs_srv2_prop_at_len[i];

            // est_srv_2_prop_at_len(i) = atl::VariableVector<T>((srv_sel_2 * atl::VariableMatrixRow<T>(N, y) * atl::VariableMatrixRow<T>(expZ_yrfrac_srv2, y)) * temp_mat_2);
            auto n_at_age_row = N.Row(y) * expZ_yrfrac_srv2.Row(y);
            for ( int j = 0; j < n_srv_len_bins; j++ )
            {
                est_srv_2_prop_at_len(i, j) = atl::Sum(atl::VariableMatrix<T>(srv_sel_2 * n_at_age_row * temp_mat_2.Column(j)));
            }

            est_srv_num = atl::Sum(atl::VariableMatrix<T>(est_srv_2_prop_at_len.Row(i)));
            if ( est_srv_num > T(0.0) )
            {
                // est_srv_2_prop_at_len(i) /= est_srv_num;

                for ( int j = 0; j < n_srv_len_bins; j++ )
                {
                    est_srv_2_prop_at_len(i, j) /= est_srv_num;
                }
            }
        }


        // srv 3
        auto srv_sel_3 = srv_sel.Row(2);

        for ( int i = 0; i < nyrs_srv3; i++ )
        {
            y = yrs_srv3[i];

            // est_srv_3_biomass(i) = 0;

            est_srv_3_biomass(i) = srv_3_q * atl::Sum(atl::VariableMatrix<T>((srv_sel_3 * N.Row(y) * expZ_yrfrac_srv3.Row(y)) * obs_srv_3_wt_at_age.Row(y))) / 1000.0;

            // convert from kg to mt
            // est_srv_3_biomass(i) /= T(1000.0);
        }

        // calculate proportions at age
        for ( int i = 0; i < nyrs_srv3_prop_at_age; i++ )
        {
            y = yrs_srv3_prop_at_age[i];

            // est_srv_3_prop_at_age(i) = atl::VariableMatrixRow<T>(srv_sel, 2) * atl::VariableMatrixRow<T>(N, y) * atl::VariableMatrixRow<T>(expZ_yrfrac_srv3, y);
            auto n_at_age_row = N.Row(y) * expZ_yrfrac_srv3.Row(y);
            for ( int j = 0; j < nages; j++ )
            {
                est_srv_3_prop_at_age(i, j) = atl::Sum(atl::VariableMatrix<T>(srv_sel_3 * n_at_age_row * age_age_err.Column(j)));
            }

            est_srv_num = atl::Sum(atl::VariableMatrix<T>(est_srv_3_prop_at_age.Row(i)));
            if ( est_srv_num > T(0.0) )
            {
                // est_srv_3_prop_at_age(i) /= est_srv_num;

                for ( int j = 0; j < nages; j++ )
                {
                    est_srv_3_prop_at_age(i, j) /= est_srv_num;
                }
            }
        }

        // calculate proportions at length
        for ( int i = 0; i < nyrs_srv3_prop_at_len; i++ )
        {
            y = yrs_srv3_prop_at_len[i];

            // est_srv_3_prop_at_len(i) = atl::VariableVector<T>((srv_sel_3 * atl::VariableMatrixRow<T>(N, y) * atl::VariableMatrixRow<T>(expZ_yrfrac_srv3, y)) * temp_mat_2);
            auto n_at_age_row = N.Row(y) * expZ_yrfrac_srv3.Row(y);
            for ( int j = 0; j < n_srv_len_bins; j++ )
            {
                est_srv_3_prop_at_len(i, j) = atl::Sum(atl::VariableMatrix<T>(srv_sel_3 * n_at_age_row * temp_mat_2.Column(j)));
            }

            est_srv_num = atl::Sum(atl::VariableMatrix<T>(est_srv_3_prop_at_len.Row(i)));
            if ( est_srv_num > T(0.0) )
            {
                // est_srv_3_prop_at_len(i) /= est_srv_num;

                for ( int j = 0; j < n_srv_len_bins; j++ )
                {
                    est_srv_3_prop_at_len(i, j) /= est_srv_num;
                }
            }
        }


        // srv 4 - age 1 index
        for ( int i = 0; i < nyrs_srv4; i++ )
        {
            y = yrs_srv4[i];

            est_srv_4_biomass(i) = srv_4_q * atl::pow(N(y, 0) / 1000000000.0, srv_4_q_pow + T(1));
            // est_srv_4_biomass(i) = srv_4_q * N(y,0) * (srv_4_q_pow + T(1.0)) / 1000.0;
            // est_srv_4_biomass(i) = srv_4_q * SQUARE(N(y,0) / 1000000000.0);
        }


        // srv 5 - age 2 index
        for ( int i = 0; i < nyrs_srv5; i++ )
        {
            y = yrs_srv5[i];

            est_srv_5_biomass(i) = srv_5_q * atl::pow(N(y, 1) / 1000000000.0, srv_5_q_pow + T(1));
            // est_srv_5_biomass(i) = srv_5_q * N(y,1) / 1000000000.0;
        }


        // srv 6
        auto srv_sel_6 = srv_sel.Row(5);

        for ( int i = 0; i < nyrs_srv6; i++ )
        {
            y = yrs_srv6[i];

            est_srv_6_biomass(i) = srv_6_q * atl::Sum(atl::VariableMatrix<T>((srv_sel_6 * N.Row(y) * expZ_yrfrac_srv6.Row(y)) * obs_srv_6_wt_at_age.Row(y))) / 1000.0;
        }

        // calculate proportions at age
        for ( int i = 0; i < nyrs_srv6_prop_at_age; i++ )
        {
            y = yrs_srv6_prop_at_age[i];

            // est_srv_6_prop_at_age(i) = atl::VariableMatrixRow<T>(srv_sel, 5) * atl::VariableMatrixRow<T>(N, y) * atl::VariableMatrixRow<T>(expZ_yrfrac_srv6, y);
            auto n_at_age_row = N.Row(y) * expZ_yrfrac_srv6.Row(y);
            for ( int j = 0; j < nages; j++ )
            {
                est_srv_6_prop_at_age(i, j) = atl::Sum(atl::VariableMatrix<T>(srv_sel_6 * n_at_age_row * age_age_err.Column(j)));
            }

            est_srv_num = atl::Sum(atl::VariableMatrix<T>(est_srv_6_prop_at_age.Row(i)));
            if ( est_srv_num > T(0.0) )
            {
                // est_srv_6_prop_at_age(i) /= est_srv_num;

                for ( int j = 0; j < nages; j++ )
                {
                    est_srv_6_prop_at_age(i, j) /= est_srv_num;
                }
            }

            // accumulations
            if ( age_young_srv6 > 0 )
            {
                for ( int j = 0; j < age_young_srv6; j++ )
                {
                    est_srv_6_prop_at_age(i, age_young_srv6) += est_srv_6_prop_at_age(i, j);
                    est_srv_6_prop_at_age(i, j) = T(0);
                }
            }

            if ( (nages - 1) > age_old_srv6 )
            {
                for ( int j = (age_old_srv6 + 1); j < nages; j++ )
                {
                    est_srv_6_prop_at_age(i, age_old_srv6) += est_srv_6_prop_at_age(i, j);
                    est_srv_6_prop_at_age(i, j) = T(0);
                }
            }
        }

        // calculate proportions at length
        for ( int i = 0; i < nyrs_srv6_prop_at_len; i++ )
        {
            y = yrs_srv6_prop_at_len[i];

            // est_srv_6_prop_at_len(i) = atl::VariableVector<T>((srv_sel_6 * atl::VariableMatrixRow<T>(N, y) * atl::VariableMatrixRow<T>(expZ_yrfrac_srv6, y)) * temp_mat_2);
            auto n_at_age_row = N.Row(y) * expZ_yrfrac_srv6.Row(y);
            for ( int j = 0; j < n_srv_len_bins; j++ )
            {
                est_srv_6_prop_at_len(i, j) = atl::Sum(atl::VariableMatrix<T>(srv_sel_6 * n_at_age_row * temp_mat_2.Column(j)));
            }

            est_srv_num = atl::Sum(atl::VariableMatrix<T>(est_srv_6_prop_at_len.Row(i)));
            if ( est_srv_num > T(0.0) )
            {
                // est_srv_6_prop_at_len(i) /= est_srv_num;

                for ( int j = 0; j < n_srv_len_bins; j++ )
                {
                    est_srv_6_prop_at_len(i, j) /= est_srv_num;
                }
            }
        }
    }

    void CalculateCatchAtAge()
    {
        atl::VariableVector<T> prop_at_age_row;
        atl::Variable<T> est_catch_num;

        atl::VariableVector<T> one_sub_expZ;

        for ( int i = 0; i < nyrs; i++ )
        {
            est_catch(i)           = T(0);
            est_fsh_prop_at_age(i) = T(0);
            est_fsh_prop_at_len(i) = T(0);

            // calculate T(1.0) - expZ.Row(i)
            auto expZ_row = expZ.Row(i);
            one_sub_expZ.Resize(expZ_row.GetSize());
            for ( int j = 0; j < expZ_row.GetSize(); ++j )
            {
                one_sub_expZ(j) = T(1.0) - expZ_row(j);
            }

            auto i_row_vector = VariableRowVectorDiv(F, i, Z, i) * one_sub_expZ * N.Row(i);

            for ( int j = 0; j < nages; j++ )
            {
                C(i, j) = atl::Sum(atl::VariableMatrix<T>(i_row_vector * age_age_err.Column(j)));
                est_catch(i) += (obs_fsh_wt_at_age(i, j) * C(i, j));
            }
            est_catch(i) /= 1000.0;

            // calculate proportions at age
            est_catch_num = atl::Sum(atl::VariableMatrix<T>(C.Row(i)));
            if ( est_catch_num > T(0.0) )
            {
                // est_fsh_prop_at_age(i) = C(i) / est_catch_num;

                for ( int j = 0; j < nages; j++ )
                {
                    est_fsh_prop_at_age(i, j) = C(i, j) / est_catch_num;
                }
            }

            // calculate proportions at length
            // est_fsh_prop_at_len(i) = atl::VariableVector<T>(est_fsh_prop_at_age(i) * age_len_trans_1);
            prop_at_age_row = est_fsh_prop_at_age.Row(i);
            for ( int j = 0; j < n_fsh_len_bins; j++ )
            {
                est_fsh_prop_at_len(i, j) = atl::Sum(atl::VariableMatrix<T>(prop_at_age_row * age_len_trans_1.Column(j)));
            }


            // accumulation
            if ( age_young_fsh > 0 )
            {
                for ( int j = 0; j < age_young_fsh; j++ )
                {
                    est_fsh_prop_at_age(i, age_young_fsh) += est_fsh_prop_at_age(i, j);
                    est_fsh_prop_at_age(i, j) = T(0.0);
                }
            }

            if ( (nages - 1) > age_old_fsh )
            {
                for ( int j = (age_old_fsh + 1); j < nages; j++ )
                {
                    est_fsh_prop_at_age(i, age_old_fsh) += est_fsh_prop_at_age(i, j);
                    est_fsh_prop_at_age(i,j) = T(0.0);
                }
            }
        }
    }

    void PrepareDeviations()
    {
        // if (this->Phase() >= this->GetActivePhase(init_pop_devs(0)))
        {
            this->PrepareDevVector(init_pop_devs);
        }

        // if (this->Phase() >= this->GetActivePhase(recruit_devs(0)))
        {
            this->PrepareDevVector(recruit_devs);
        }

        // if (this->Phase() >= this->GetActivePhase(fsh_mort_devs(0)))
        {
            this->PrepareDevVector(fsh_mort_devs);
        }

        // if (this->Phase() >= this->GetActivePhase(fsh_sel_asc_alpha_devs(0)))
        {
            this->PrepareDevVector(fsh_sel_asc_alpha_devs);
        }

        // if (this->Phase() >= this->GetActivePhase(fsh_sel_asc_beta_devs(0)))
        {
            this->PrepareDevVector(fsh_sel_asc_beta_devs);
        }

        // if (this->Phase() >= this->GetActivePhase(fsh_sel_desc_alpha_devs(0)))
        {
            this->PrepareDevVector(fsh_sel_desc_alpha_devs);
        }

        // if (this->Phase() >= this->GetActivePhase(fsh_sel_desc_beta_devs(0)))
        {
            this->PrepareDevVector(fsh_sel_desc_beta_devs);
        }
    }

    virtual void Objective_Function(atl::Variable<T>& f)
    {
        T o = 0.00001;  // small value for proportions calculations

        f = 0;

        this->PrepareDeviations();

        this->Selectivity();
        this->Growth();
        this->Mortality();
        this->Survivability();
        this->NumbersAtAge();
        this->FleetIndices();
        this->CalculateCatchAtAge();

        // NLL for catch
        nll_parts(0) = 0;
        for ( int i = 0; i < nyrs; i++ )
        {
            nll_parts(0) += (0.5 * SQUARE((std::log(obs_catch[i] + o) - atl::log(est_catch(i) + o)) / obs_catch_CV[i]));
        }

        // NLL for fsh proportions at age
        nll_parts(1) = 0;
        for ( int i = 0; i < nyrs_fsh_prop_at_age; i++ )
        {
            if ( obs_fsh_prop_at_age_N[i] > 0 )
            {
                int y = yrs_fsh_prop_at_age[i];

                for ( int j = age_young_fsh; j <= age_old_fsh; j++ )
                {
                    nll_parts(1) -= (T(obs_fsh_prop_at_age_N[i]) * obs_fsh_prop_at_age(i, j) * (atl::log(est_fsh_prop_at_age(y, j) + o) - std::log(obs_fsh_prop_at_age(i, j) + o)));
                }
            }
        }

        // NLL for fsh proportions at len
        nll_parts(2) = 0;
        for ( int i = 0; i < nyrs_fsh_prop_at_len; i++ )
        {
            if ( obs_fsh_prop_at_len_N[i] > 0 )
            {
                int y = yrs_fsh_prop_at_len[i];

                for ( int j = 0; j < n_fsh_len_bins; j++ )
                {
                    nll_parts(2) -= (T(obs_fsh_prop_at_len_N[i]) * obs_fsh_prop_at_len(i, j) * (atl::log(est_fsh_prop_at_len(y, j) + o) - std::log(obs_fsh_prop_at_len(i, j) + o)));
                }
            }
        }

        // NLL for srv 1 biomass
        nll_parts(3) = 0;
        for ( int i = 0; i < nyrs_srv1a; i++ )
        {
            nll_parts(3) += (0.5 * SQUARE(((std::log(obs_srv_1a_biomass[i] + o) - atl::log(est_srv_1a_biomass(i) + o) + SQUARE((obs_srv_1a_CV[i] / 2.0))) / obs_srv_1a_CV[i])));
        }

        for ( int i = 0; i < nyrs_srv1b; i++ )
        {
            nll_parts(3) += (0.5 * SQUARE(((std::log(obs_srv_1b_biomass[i] + o) - atl::log(est_srv_1b_biomass(i) + o) + SQUARE((obs_srv_1b_CV[i] / 2.0))) / obs_srv_1b_CV[i])));
        }

        for ( int i = 0; i < nyrs_srv1; i++ )
        {
            nll_parts(3) += (0.5 * SQUARE(((std::log(obs_srv_1_biomass[i] + o) - atl::log(est_srv_1_biomass(i) + o) + SQUARE((obs_srv_1_CV[i] / 2.0))) / obs_srv_1_CV[i])));
        }

        // NLL for srv 1 proportions at age
        nll_parts(4) = 0;
        for ( int i = 0; i < nyrs_srv1_prop_at_age; i++ )
        {
            if ( obs_srv_1_prop_at_age_N[i] > 0 )
            {
                for ( int j = age_young_srv1; j <= age_old_srv1; j++ )
                {
                    nll_parts(4) -= (T(obs_srv_1_prop_at_age_N[i]) * obs_srv_1_prop_at_age(i, j) * (atl::log(est_srv_1_prop_at_age(i, j) + o) - std::log(obs_srv_1_prop_at_age(i, j) + o)));
                }
            }
        }

        // NLL for srv 1 proportions at len
        nll_parts(5) = 0;
        for ( int i = 0; i < nyrs_srv1_prop_at_len; i++ )
        {
            if ( obs_srv_1_prop_at_len_N[i] > 0 )
            {
                for ( int j = 0; j < n_srv_len_bins; j++ )
                {
                    nll_parts(5) -= (T(obs_srv_1_prop_at_len_N[i]) * obs_srv_1_prop_at_len(i, j) * (atl::log(est_srv_1_prop_at_len(i, j) + o) - std::log(obs_srv_1_prop_at_len(i, j) + o)));
                }
            }
        }

        // NLL for srv 2 biomass
        nll_parts(6) = 0;
        for ( int i = 0; i < nyrs_srv2; i++ )
        {
            nll_parts(6) += (0.5 * SQUARE(((std::log(obs_srv_2_biomass[i] + o) - atl::log(est_srv_2_biomass(i) + o) + SQUARE((obs_srv_2_CV[i] / 2.0))) / obs_srv_2_CV[i])));
        }

        // NLL for srv 2 proportions at age
        nll_parts(7) = 0;
        for ( int i = 0; i < nyrs_srv2_prop_at_age; i++ )
        {
            if ( obs_srv_2_prop_at_age_N[i] > 0 )
            {
                for ( int j = age_young_srv2; j <= age_old_srv2; j++ )
                {
                    nll_parts(7) -= (T(obs_srv_2_prop_at_age_N[i]) * obs_srv_2_prop_at_age(i, j) * (atl::log(est_srv_2_prop_at_age(i, j) + o) - std::log(obs_srv_2_prop_at_age(i, j) + o)));
                }
            }
        }

        // NLL for srv 2 proportions at len
        nll_parts(8) = 0;
        for ( int i = 0; i < nyrs_srv2_prop_at_len; i++ )
        {
            if ( obs_srv_2_prop_at_len_N[i] > 0 )
            {
                for ( int j = 0; j < n_srv_len_bins; j++ )
                {
                    nll_parts(8) -= (T(obs_srv_2_prop_at_len_N[i]) * obs_srv_2_prop_at_len(i, j) * (atl::log(est_srv_2_prop_at_len(i, j) + o) - std::log(obs_srv_2_prop_at_len(i, j) + o)));
                }
            }
        }

        // NLL for srv 3 biomass
        nll_parts(9) = 0;
        for ( int i = 0; i < nyrs_srv3; i++ )
        {
            nll_parts(9) += (0.5 * SQUARE(((std::log(obs_srv_3_biomass[i] + o) - atl::log(est_srv_3_biomass(i) + o) + SQUARE((obs_srv_3_CV[i] / 2.0))) / obs_srv_3_CV[i])));
        }

        // NLL for srv 3 proportions at age
        nll_parts(10) = 0;
        for ( int i = 0; i < nyrs_srv3_prop_at_age; i++ )
        {
            if ( obs_srv_3_prop_at_age_N[i] > 0 )
            {
                for ( int j = 0; j < nages; j++ )
                {
                    nll_parts(10) -= (T(obs_srv_3_prop_at_age_N[i]) * obs_srv_3_prop_at_age(i, j) * (atl::log(est_srv_3_prop_at_age(i, j) + o) - std::log(obs_srv_3_prop_at_age(i, j) + o)));
                }
            }
        }

        // NLL for srv 3 proportions at len
        nll_parts(11) = 0;
        for ( int i = 0; i < nyrs_srv3_prop_at_len; i++ )
        {
            if ( obs_srv_3_prop_at_len_N[i] > 0 )
            {
                for ( int j = 0; j < n_srv_len_bins; j++ )
                {
                    nll_parts(11) -= (T(obs_srv_3_prop_at_len_N[i]) * obs_srv_3_prop_at_len(i, j) * (atl::log(est_srv_3_prop_at_len(i, j) + o) - std::log(obs_srv_3_prop_at_len(i, j) + o)));
                }
            }
        }

        // NLL for srv 4 biomass
        nll_parts(12) = 0;
        for ( int i = 0; i < nyrs_srv4; i++ )
        {
            nll_parts(12) += (0.5 * SQUARE(((std::log(obs_srv_4_biomass[i] + o) - atl::log(est_srv_4_biomass(i) + o) + SQUARE((obs_srv_4_CV[i] / 2.0))) / obs_srv_4_CV[i])));
        }

        // NLL for srv 5 biomass
        nll_parts(13) = 0;
        for ( int i = 0; i < nyrs_srv5; i++ )
        {
            nll_parts(13) += (0.5 * SQUARE(((std::log(obs_srv_5_biomass[i] + o) - atl::log(est_srv_5_biomass(i) + o) + SQUARE((obs_srv_5_CV[i] / 2.0))) / obs_srv_5_CV[i])));
        }

        // NLL for srv 6 biomass
        nll_parts(14) = 0;
        for ( int i = 0; i < nyrs_srv6; i++ )
        {
            nll_parts(14) += (0.5 * SQUARE(((std::log(obs_srv_6_biomass[i] + o) - atl::log(est_srv_6_biomass(i) + o) + SQUARE((obs_srv_6_CV[i] / 2.0))) / obs_srv_6_CV[i])));
        }

        // NLL for srv 6 proportions at age
        nll_parts(15) = 0;
        for ( int i = 0; i < nyrs_srv6_prop_at_age; i++ )
        {
            if ( obs_srv_6_prop_at_age_N[i] > 0 )
            {
                for ( int j = age_young_srv6; j <= age_old_srv6; j++ )
                {
                    nll_parts(15) -= (T(obs_srv_6_prop_at_age_N[i]) * obs_srv_6_prop_at_age(i, j) * (atl::log(est_srv_6_prop_at_age(i, j) + o) - std::log(obs_srv_6_prop_at_age(i, j) + o)));
                }
            }
        }

        // NLL for srv 6 proportions at len
        nll_parts(16) = 0;
        for ( int i = 0; i < nyrs_srv6_prop_at_len; i++ )
        {
            if ( obs_srv_6_prop_at_len_N[i] > 0 )
            {
                for ( int j = 0; j < n_srv_len_bins; j++ )
                {
                    nll_parts(16) -= (T(obs_srv_6_prop_at_len_N[i]) * obs_srv_6_prop_at_len(i, j) * (atl::log(est_srv_6_prop_at_len(i, j) + o) - std::log(obs_srv_6_prop_at_len(i, j) + o)));
                }
            }
        }


        // penalty on initial population devs
        // nll_parts(17) = (0.5 / SQUARE(sigmaR)) * atl::Norm2(init_pop_devs);

        // penalty on rec devs
        // nll_parts(18) = (0.5 / SQUARE(sigmaR)) * atl::Norm2(recruit_devs);
        nll_parts(18) = 0.0;
        for ( int i = 0; i <= 7; i++ )
        {
            nll_parts(18) += (0.5 * SQUARE(recruit_devs(i) / sigmaR));
        }
        for ( int i = (nyrs - 2); i < nyrs; i++ )
        {
            nll_parts(18) += (0.5 * SQUARE(recruit_devs(i) / sigmaR));
        }

        // penalty on fsh mort dev
        // nll_parts(19) = atl::Norm2(fsh_mort_devs);

        // penalty to ensure that N(1964,0) and N(1965,0) are close
        // nll_parts(20) = 1000.0 * SQUARE(atl::log(N(0,0)) - atl::log(N(1,0)));

        // likelihood component for scaling srv1 Dyson q to Miller Freeman EK500 q (see pk10_1.tpl, line1243)
        nll_parts(21) = (1.0 / (2.0 * (SQUARE(0.0244) + SQUARE(0.000001)))) * SQUARE(log_srv_1_q - log_srv_1b_q - 0.124);

        // likelihood component for q for srv1
        nll_parts(22) = 0.5 * SQUARE((log_srv_2_q - log(0.85)) / 0.1);

        auto temp_vec1 = atl::FirstDifference(fsh_sel_asc_alpha_devs);
        auto temp_vec2 = atl::FirstDifference(fsh_sel_asc_beta_devs);
        auto temp_vec3 = atl::FirstDifference(fsh_sel_desc_alpha_devs);
        auto temp_vec4 = atl::FirstDifference(fsh_sel_desc_beta_devs);

        for ( int i = 0; i < fsh_sel_sd.size(); ++i )
        {
            temp_vec1(i) /= T(4.0 * fsh_sel_sd[i]);
            temp_vec2(i) /= T(1.0 * fsh_sel_sd[i]);
            temp_vec3(i) /= T(4.0 * fsh_sel_sd[i]);
            temp_vec4(i) /= T(1.0 * fsh_sel_sd[i]);
        }

        nll_parts(23)  = 0.5 * atl::Norm2(temp_vec1);
        nll_parts(23) += 0.5 * atl::Norm2(temp_vec2);
        nll_parts(23) += 0.5 * atl::Norm2(temp_vec3);
        nll_parts(23) += 0.5 * atl::Norm2(temp_vec4);

        f = atl::Sum(nll_parts);

        /*
        if (this->LastPhase())
        {
            this->CalculateHarvestStrategy();
        }
        */
    }

    atl::VariableVector<T> NormalizeVariableVector(atl::VariableVector<T>& v, size_t idx)
    {
        atl::VariableVector<T> new_v;

        size_t v_len = v.GetSize();

        if ( v_len > 0 && idx < v_len && v(idx) != T(0.0))
        {
            new_v.Resize(v_len);

            for ( int i = 0; i < v_len; ++i )
            {
                new_v(i) = v(i) / v(idx);
            }
        }

        return new_v;
    }

    void PrintVariableMatrix(std::ofstream& out, atl::VariableMatrix<T>& m)
    {
        for ( int i = 0; i < m.GetRows(); ++i )
        {
            out << m.Row(i) << std::endl;
        }
    }

    void PrintRealMatrix(std::ofstream& out, atl::RealMatrix<T>& m)
    {
        for ( int i = 0; i < m.GetRows(); ++i )
        {
            // WHY DOESN'T THIS WORK???
            // out << m.Row(i) << std::endl;

            for ( int j = 0; j < m.GetColumns(); ++j )
            {
                out << m(i, j) << " ";
            }

            out << std::endl;
        }
    }

    void Report()
    {
        atl::Variable<T> one_meeellion = 1000000.0;     // conversion factor

        std::ofstream output("goa_wp_report.txt");
        output << std::fixed;

        output << std::endl << std::endl;
        output << "objective function " << atl::Sum(nll_parts) << std::endl;
        output << "objective function components " << nll_parts << std::endl;
        output << std::endl;

        output << "init devs " << init_pop_devs << std::endl;
        output << "init N-at-age " << initial_population << std::endl;
        output << "ratios " << this->NormalizeVariableVector(initial_population, 0) << std::endl;
        output << std::endl;

        output << "log mean_recruits " << log_mean_recruits << "\t" << atl::exp(log_mean_recruits) << std::endl;
        output << "recruit_devs " << recruit_devs << std::endl;
        output << "recruits " << recruits << std::endl;
        output << std::endl;

        output << "log mean_fsh_mort " << log_mean_fsh_mort << "\t" << atl::exp(log_mean_fsh_mort) << std::endl;
        output << "fsh_mort_devs " << fsh_mort_devs << std::endl;
        output << "fsh_mort " << fsh_mort << std::endl;
        output << std::endl;

        output << "log fsh_sel_asc_alpha " << log_fsh_sel_asc_alpha << std::endl;
        output << "log fsh_sel_asc_beta " << log_fsh_sel_asc_beta << std::endl;
        output << "log fsh_sel_desc_alpha " << log_fsh_sel_desc_alpha << std::endl;
        output << "log fsh_sel_desc_beta " << log_fsh_sel_desc_beta << std::endl;
        output << "fsh_sel_asc_alpha " << fsh_sel_asc_alpha << std::endl;
        output << "fsh_sel_asc_beta " << fsh_sel_asc_beta << std::endl;
        output << "fsh_sel_desc_alpha " << fsh_sel_desc_alpha << std::endl;
        output << "fsh_sel_desc_beta " << fsh_sel_desc_beta << std::endl;
        output << "fsh_sel_asc_alpha_devs " << fsh_sel_asc_alpha_devs << std::endl;
        output << "fsh_sel_asc_beta_devs " << fsh_sel_asc_beta_devs << std::endl;
        output << "fsh_sel_desc_alpha_devs " << fsh_sel_desc_alpha_devs << std::endl;
        output << "fsh_sel_desc_beta_devs " << fsh_sel_desc_beta_devs << std::endl;
        output << std::endl;
        output << "fsh sel" << std::endl;
        // output << fsh_sel << std::endl;
        this->PrintVariableMatrix(output, fsh_sel);
        output << std::endl;

        output << "Natural mortality-at-age" << std::endl;
        output << M << std::endl;
        output << "Total mortality-at-age" << std::endl;
        this->PrintVariableMatrix(output, Z);
        output << std::endl;

        output << "observed catch " << obs_catch << std::endl;
        output << "estimated catch " << est_catch << std::endl;
        output << std::endl;

        output << "srv_1a_q " << srv_1a_q << std::endl;
        output << "srv_1b_q " << srv_1b_q << std::endl;
        output << "srv_1_q " << srv_1_q << std::endl;
        output << "srv_2_q " << srv_2_q << std::endl;
        output << "srv_3_q " << srv_3_q << std::endl;
        output << "srv_4_q " << srv_4_q << std::endl;
        output << "srv_4_q_pow " << srv_4_q_pow << std::endl;
        output << "srv_5_q " << srv_5_q << std::endl;
        output << "srv_5_q_pow " << srv_5_q_pow << std::endl;
        output << "srv_6_q " << srv_6_q << std::endl;
        output << std::endl;

        output << "log_srv1_sel_asc_alpha " << log_srv1_sel_asc_alpha << std::endl;
        output << "log_srv1_sel_asc_beta " << log_srv1_sel_asc_beta << std::endl;
        output << "log_srv1_sel_desc_alpha " << log_srv1_sel_desc_alpha << std::endl;
        output << "log_srv1_sel_desc_beta " << log_srv1_sel_desc_beta << std::endl;
        output << "srv1_sel_asc_alpha " << srv1_sel_asc_alpha << std::endl;
        output << "srv1_sel_asc_beta " << srv1_sel_asc_beta << std::endl;
        output << "srv1_sel_desc_alpha " << srv1_sel_desc_alpha << std::endl;
        output << "srv1_sel_desc_beta " << srv1_sel_desc_beta << std::endl;
        output << std::endl;

        output << "log_srv2_sel_asc_alpha " << log_srv2_sel_asc_alpha << std::endl;
        output << "log_srv2_sel_asc_beta " << log_srv2_sel_asc_beta << std::endl;
        output << "log_srv2_sel_desc_alpha " << log_srv2_sel_desc_alpha << std::endl;
        output << "log_srv2_sel_desc_beta " << log_srv2_sel_desc_beta << std::endl;
        output << "srv2_sel_asc_alpha " << srv2_sel_asc_alpha << std::endl;
        output << "srv2_sel_asc_beta " << srv2_sel_asc_beta << std::endl;
        output << "srv2_sel_desc_alpha " << srv2_sel_desc_alpha << std::endl;
        output << "srv2_sel_desc_beta " << srv2_sel_desc_beta << std::endl;
        output << std::endl;

        output << "log_srv3_sel_asc_alpha " << log_srv3_sel_asc_alpha << std::endl;
        output << "log_srv3_sel_asc_beta " << log_srv3_sel_asc_beta << std::endl;
        output << "log_srv3_sel_desc_alpha " << log_srv3_sel_desc_alpha << std::endl;
        output << "log_srv3_sel_desc_beta " << log_srv3_sel_desc_beta << std::endl;
        output << "srv3_sel_asc_alpha " << srv3_sel_asc_alpha << std::endl;
        output << "srv3_sel_asc_beta " << srv3_sel_asc_beta << std::endl;
        output << "srv3_sel_desc_alpha " << srv3_sel_desc_alpha << std::endl;
        output << "srv3_sel_desc_beta " << srv3_sel_desc_beta << std::endl;
        output << std::endl;

        output << "log_srv6_sel_asc_alpha " << log_srv6_sel_asc_alpha << std::endl;
        output << "log_srv6_sel_asc_beta " << log_srv6_sel_asc_beta << std::endl;
        output << "log_srv6_sel_desc_alpha " << log_srv6_sel_desc_alpha << std::endl;
        output << "log_srv6_sel_desc_beta " << log_srv6_sel_desc_beta << std::endl;
        output << "srv6_sel_asc_alpha " << srv6_sel_asc_alpha << std::endl;
        output << "srv6_sel_asc_beta " << srv6_sel_asc_beta << std::endl;
        output << "srv6_sel_desc_alpha " << srv6_sel_desc_alpha << std::endl;
        output << "srv6_sel_desc_beta " << srv6_sel_desc_beta << std::endl;
        output << std::endl;

        for ( int k = 0; k < srv_sel.GetRows(); k++ )
        {
            output << "srv_sel " << (k + 1) << " " << srv_sel.Row(k) << std::endl;
        }
        output << std::endl;

        output << "observed srv 1a " << obs_srv_1a_biomass << std::endl;
        output << "estimated srv 1a " << est_srv_1a_biomass << std::endl;
        output << std::endl;

        output << "observed srv 1b " << obs_srv_1b_biomass << std::endl;
        output << "estimated srv 1b " << est_srv_1b_biomass << std::endl;
        output << std::endl;

        output << "observed srv 1 " << obs_srv_1_biomass << std::endl;
        output << "estimated srv 1 " << est_srv_1_biomass << std::endl;
        output << std::endl;

        output << "observed srv 2 " << obs_srv_2_biomass << std::endl;
        output << "estimated srv 2 " << est_srv_2_biomass << std::endl;
        output << std::endl;

        output << "observed srv 3 " << obs_srv_3_biomass << std::endl;
        output << "estimated srv 3 " << est_srv_3_biomass << std::endl;
        output << std::endl;

        output << "observed srv 4 " << obs_srv_4_biomass << std::endl;
        output << "estimated srv 4 " << est_srv_4_biomass << std::endl;
        output << std::endl;

        output << "observed srv 5 " << obs_srv_5_biomass << std::endl;
        output << "estimated srv 5 " << est_srv_5_biomass << std::endl;
        output << std::endl;

        output << "observed srv 6 " << obs_srv_6_biomass << std::endl;
        output << "estimated srv 6 " << est_srv_6_biomass << std::endl;
        output << std::endl;

        output << "total biomass " << est_total_biomass << std::endl;
        output << "summary (age 3+) biomass " << est_summary_biomass << std::endl;
        output << "spawning biomass " << est_spawn_biomass << std::endl;
        output << std::endl;

        output << "N at age" << std::endl;
        // output << (N / one_meeellion) << std::endl;
        // output << N << std::endl;
        this->PrintVariableMatrix(output, N);
        output << std::endl;

        output << "Observed fishery proportions-at-age" << std::endl;
        this->PrintRealMatrix(output, obs_fsh_prop_at_age);
        output << std::endl;
        output << "Estimated fishery proportions-at-age" << std::endl;
        this->PrintVariableMatrix(output, est_fsh_prop_at_age);
        output << std::endl;

        output << "Observed survey 1 proportions-at-age" << std::endl;
        this->PrintRealMatrix(output, obs_srv_1_prop_at_age);
        output << std::endl;
        output << "Estimated survey 1 proportions-at-age" << std::endl;
        this->PrintVariableMatrix(output, est_srv_1_prop_at_age);
        output << std::endl;

        output << "Observed survey 2 proportions-at-age" << std::endl;
        this->PrintRealMatrix(output, obs_srv_2_prop_at_age);
        output << std::endl;
        output << "Estimated survey 2 proportions-at-age" << std::endl;
        this->PrintVariableMatrix(output, est_srv_2_prop_at_age);
        output << std::endl;

        output << "Observed survey 3 proportions-at-age" << std::endl;
        this->PrintRealMatrix(output, obs_srv_3_prop_at_age);
        output << std::endl;
        output << "Estimated survey 3 proportions-at-age" << std::endl;
        this->PrintVariableMatrix(output, est_srv_3_prop_at_age);
        output << std::endl;

        output << "Observed survey 6 proportions-at-age" << std::endl;
        this->PrintRealMatrix(output, obs_srv_6_prop_at_age);
        output << std::endl;
        output << "Estimated survey 6 proportions-at-age" << std::endl;
        this->PrintVariableMatrix(output, est_srv_6_prop_at_age);
        output << std::endl;

        output << std::endl;
    }

    void CalculateHarvestStrategy()
    {
    }

    void OutputOptimInfo()
    {
        std::ofstream optim_stats("optim_stats.txt");

        auto stats = this->GetObjectiveFunctionStatistics();

        optim_stats << "Optimization Information" << std::endl;
        optim_stats << std::endl;

        optim_stats << "Parameter names" << std::endl;
        optim_stats << stats.parameter_names << std::endl;
        optim_stats << std::endl;

        optim_stats << "Parameter values" << std::endl;
        optim_stats << stats.parameter_values << std::endl;
        optim_stats << std::endl;

        optim_stats << "Parameter gradient" << std::endl;
        optim_stats << stats.gradient << std::endl;
        optim_stats << std::endl;

        optim_stats << std::endl;
    }

    void OutputVarCovar()
    {
        // std::cout << std::endl << "SE vector" << std::endl << se << std::endl;

        // atl::VariableMatrix<T> var_covar = inverse_hess / (atl::OuterProduct(se,se));

        std::cout << std::endl << "Calculating variance-covariance matrix" << std::endl << std::endl;

        std::cout << std::endl << "Variance-covariance matrix" << std::endl << std::endl;

        auto var_covar = this->GetVarianceCovariance();
        size_t dimM = var_covar.GetRows();
        if (dimM > 0)   // if it is not, then there's a problem
        {
            for (int i = 0; i < dimM; ++i)
            {
                std::cout << "Variable " << (i + 1) << std::endl;

                for (int j = 0; j < dimM; ++j)
                {
                    std::cout << " " << var_covar.GetValue(i, j);
                }

                std::cout << std::endl;
            }
        }
    }

};


#endif /* CATCHATAGE_HPP */
